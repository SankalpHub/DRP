/*
 * Copyright (c) 2025 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://edgeimpulse.com/legal/terms-of-service) or Enterprise Terms of
 * Service (https://edgeimpulse.com/legal/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 29.03.2025 17:13:59

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 74400;
#else
constexpr int kTensorArenaSize = 73376;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,48,48,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(8) int32_t tensor_data2[3] = { 23743, -28581, -26923, };
const TfArray<1, int> tensor_dimension2 = { 1, { 3 } };
const TfArray<3, float> quant2_scale = { 3, { 0.00014363277296070009, 0.0001258726988453418, 0.00014656879648100585, } };
const TfArray<3, int> quant2_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data3[3*1*1*32] = { 
  /* [0][0][][] */ 41,-20,80,-46,-47,46,-13,36,-47,101,65,-58,-10,-58,46,-52,-61,86,127,122,-79,-55,-6,-121,-124,65,-45,16,52,-11,-11,-32, 
  /* [1][0][][] */ 46,-26,-50,0,6,121,5,-10,127,-89,-19,-58,-48,100,7,-40,102,-25,-42,-84,-122,-12,92,82,-4,17,23,8,-54,-36,-15,-7, 
  /* [2][0][][] */ -47,71,-55,53,53,-49,-8,95,83,8,108,-22,-70,-97,75,101,-66,-30,-30,-88,70,107,-30,-63,70,-48,3,-127,10,-47,74,-5, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 3,1,1,32 } };
const TfArray<3, float> quant3_scale = { 3, { 0.0035520773380994797, 0.0031128658447414637, 0.0036246858071535826, } };
const TfArray<3, int> quant3_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data4[32] = { 470, 171, -2018, -221, -1678, 147, -1982, 574, 403, 3019, 569, -1960, -2054, 241, 244, 447, -893, -1842, 3711, -1646, -853, 484, -2087, -2151, 316, -2504, -2088, -1924, -1612, -2066, -1167, -1767, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 3.7761583371320739e-05, 4.342982720118016e-05, 4.1477625927655026e-05, 4.0520702896174043e-05, 3.7731220800196752e-05, 4.7598743549315259e-05, 3.8697846321156248e-05, 4.3967967940261588e-05, 3.8082449464127421e-05, 4.4909520511282608e-05, 5.3046660468680784e-05, 3.8678259443258867e-05, 4.1745857743080705e-05, 4.1736260754987597e-05, 3.3477015676908195e-05, 3.5128268791595474e-05, 3.7537349271588027e-05, 3.9594408008269966e-05, 7.0206435339059681e-05, 3.7502781196963042e-05, 3.9001773984637111e-05, 3.8990190660115331e-05, 5.2357609092723578e-05, 4.4874195737065747e-05, 3.570114859030582e-05, 4.8371730372309685e-05, 4.0272298065247014e-05, 4.0302158595295623e-05, 3.7144429370528087e-05, 3.9360940718324855e-05, 3.4366683394182473e-05, 4.0594073652755469e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -24,-32,90,8,89,-1,-59,-93,-42,-82,-105,-32,54,14,-26,65,-33,-18,-74,-43,-100,-95,1,101,-127,8,80,-24,110,17,-9,-55,60,-42,-80,66,-103,-81,-74,32,47,-49,-116,95,52,-96,91,-8,42,-53,-16,44,-55,-25,-83,106,19,66,83,-70,-70,77,-42,56,10,25,78,93,57,74,42,-111,98,-99,53,70,-72,7,-51,25,41,26,82,-104,-27,-31,-100,65,14,82,6,-97,4,56,-38,18, 
  /* [1][0][][] */ -75,26,-43,-15,-65,30,-9,-5,73,-108,-55,45,9,-39,-16,30,50,-60,16,67,-12,-36,44,-18,42,-23,-64,80,-30,-6,34,-79,-3,45,-62,-41,58,51,0,-79,-71,-22,7,-85,-58,5,-62,-31,-49,-97,92,50,20,36,-84,-76,16,41,64,28,-19,56,-74,-114,-77,-2,20,2,42,26,35,11,-127,72,-39,32,63,-81,-14,71,-42,23,-24,-60,5,67,-35,-47,76,77,31,-21,27,24,48,5, 
  /* [2][0][][] */ -3,-2,-80,33,-55,-85,30,41,-98,26,-61,52,32,-48,29,-118,-82,-57,-7,4,-107,-41,51,-22,-49,20,44,-26,-90,28,22,35,-92,-54,-109,-121,-98,39,48,-55,-127,-95,-23,-37,-103,53,-60,-93,43,-10,31,-98,-71,15,-23,-24,-90,36,-78,-31,-45,9,-63,15,32,-1,3,31,-110,12,-25,-93,-10,-91,-8,-12,-74,-56,-29,-22,-7,-112,-48,-60,-32,-112,-50,-55,37,55,-54,-32,-72,-96,-75,-86, 
  /* [3][0][][] */ 44,21,21,-56,-54,33,-96,23,25,-3,57,-42,51,58,30,13,70,89,-96,11,91,-111,-39,-101,-5,-109,-66,98,28,-68,62,0,-86,-41,-28,-31,-60,-43,30,59,-47,-68,-90,20,51,23,-56,-66,94,-90,38,-1,78,27,56,-97,-117,-88,-83,-40,-64,14,-43,53,51,-30,-66,-39,-49,-99,-24,71,-1,-111,47,-49,43,66,85,-44,-76,-118,17,44,21,47,-54,-86,-58,46,-19,-106,32,-127,-67,15, 
  /* [4][0][][] */ 15,59,-30,14,-49,-51,0,-13,14,49,-34,17,-5,-61,-37,-83,-49,-31,-83,-15,61,-106,42,-5,-44,-31,26,-77,-68,3,-84,-72,31,68,-16,-112,-69,-34,-125,14,-68,-79,-90,-103,0,60,-1,19,-8,-62,-42,-90,-102,10,-100,-12,2,-106,-7,-15,-21,-89,-61,-84,-67,18,-25,-58,-5,-125,-121,-97,-74,-8,57,17,23,-46,-36,-76,-24,-66,-112,-45,-28,31,37,-26,-127,-90,9,10,-2,57,-115,-43, 
  /* [5][0][][] */ 79,-56,44,47,43,-57,35,41,16,-68,3,-51,29,54,34,38,60,65,-83,75,-27,22,11,3,-121,-33,8,-52,44,30,25,-46,-23,19,-41,19,-127,-85,8,40,-45,-18,-17,83,-5,26,38,-35,-44,75,29,-15,25,26,28,-4,52,53,-81,1,20,-28,20,-34,-3,87,-7,32,59,-6,27,-46,-16,3,-7,-55,23,-12,-49,11,61,35,-21,-5,-39,64,-32,11,-13,-121,82,73,-18,12,37,-111, 
  /* [6][0][][] */ -11,-61,61,30,-101,-63,-36,26,13,-91,-24,-97,47,18,71,-122,10,-22,-28,52,-98,-120,62,21,-82,-100,-32,-74,-55,-127,5,-87,-100,-125,-65,-119,-37,-2,-124,42,38,11,-13,-36,-117,54,-97,-66,-71,-19,-56,-88,16,-68,45,-48,-29,-31,-81,66,-110,-27,34,-92,-73,26,50,-68,36,-35,-110,-37,23,-91,-101,-69,-90,-117,-72,-51,-4,-55,1,-56,-83,-105,-57,-112,36,43,45,-14,-77,-78,28,-58, 
  /* [7][0][][] */ 30,64,-19,-32,-37,28,-11,-1,77,-32,-51,6,-1,-75,-53,68,-24,-15,-40,99,48,-9,17,45,-40,58,1,59,-57,86,-8,-20,-25,-24,52,65,-53,62,3,-31,71,-50,82,75,-37,-7,38,-69,0,-108,-67,-42,-2,46,2,-31,78,-50,29,-85,26,-60,48,-64,-35,-87,26,-26,-127,10,53,69,45,15,55,47,-31,34,-62,48,82,-96,-2,-46,71,9,-62,77,74,18,48,55,-99,-124,16,-46, 
  /* [8][0][][] */ 25,44,-35,-84,72,46,-42,-14,-33,40,48,77,16,-53,-67,-40,-33,113,-103,34,5,-51,88,120,-99,90,60,84,-45,32,-57,121,75,-6,48,0,125,-20,-14,97,87,108,-93,-70,12,-11,4,104,54,-76,-39,-16,-39,15,-19,-80,10,119,-50,118,110,58,25,112,-4,-16,-10,98,-67,42,6,1,81,41,24,14,-16,123,71,72,35,71,-99,-127,39,50,59,-36,34,-25,-75,102,-82,-112,-36,39, 
  /* [9][0][][] */ 2,12,127,118,54,-94,-38,-65,47,44,19,56,-22,-15,-55,6,0,-40,5,-11,38,103,-81,-92,102,-7,-3,22,-3,-53,-47,60,43,-15,21,18,-61,44,-12,-69,16,-31,90,-105,43,67,-83,56,24,24,-27,1,72,-90,-21,97,103,-65,-5,-32,-48,53,53,-61,-32,-22,108,51,-10,108,117,-32,-26,75,-62,-30,-40,-94,-30,92,71,61,105,78,-22,-50,49,19,91,36,8,74,117,42,70,0, 
  /* [10][0][][] */ -91,63,62,-43,5,14,73,18,16,-9,30,-44,42,41,-67,20,-81,26,-82,-23,-4,-10,52,-50,29,37,-77,-52,-26,57,-47,-89,23,28,77,38,-6,2,-12,42,-13,78,-50,-2,-127,-25,-18,-26,-40,-24,33,11,51,3,-37,-48,-67,11,40,-42,16,32,60,40,84,-57,-66,-40,-9,-25,-55,-34,42,35,-39,70,7,39,48,27,59,-37,42,68,-53,39,74,-6,35,17,-13,-35,-63,-97,-12,-39, 
  /* [11][0][][] */ 57,-17,-46,48,62,2,10,-2,123,42,-98,62,-39,-102,-11,-83,-81,-119,18,-5,-5,33,-15,-127,-105,-113,-49,28,35,-34,-13,-49,-106,-93,11,4,-86,24,-51,-80,-54,50,-81,-28,-71,-85,-111,-103,91,48,58,11,-112,-104,-22,-13,-85,-80,-58,-106,-92,39,42,-27,-11,39,-78,-9,41,14,-62,-96,0,57,-112,9,-85,74,-64,43,-124,-57,-71,-60,9,-99,-17,-2,-113,-27,-24,-118,-105,-57,-97,-68, 
  /* [12][0][][] */ -27,25,-77,-39,30,-32,-63,-5,-12,7,-46,-25,-69,-26,4,-90,-111,-60,-69,-99,-18,-41,-23,37,-82,-76,43,-106,36,-18,-65,52,-104,-89,-72,-25,-34,-94,-47,-1,50,-5,-122,-62,-54,-99,-66,56,-67,-127,-96,46,-8,-31,-101,29,-53,-81,10,18,13,51,-37,4,48,-9,-67,55,8,38,-3,17,30,57,-43,-39,-59,-9,-121,-101,-82,41,-1,-25,-60,-10,2,58,-104,-107,38,-4,39,-42,-20,24, 
  /* [13][0][][] */ 98,-45,81,65,90,111,81,59,12,-71,14,-27,82,40,60,-23,-65,-25,-105,33,13,-43,93,-7,-90,39,25,27,-56,-55,79,51,36,97,-14,40,-70,-38,19,86,-37,84,-95,32,-9,26,11,-23,64,82,-7,-127,-66,36,82,-53,-53,42,-28,-21,-33,110,-75,27,-18,-26,-58,79,-23,-24,30,2,-55,40,-45,-39,-57,76,54,-66,35,-65,51,-63,-50,-70,37,58,-15,-21,-55,58,79,-66,28,-16, 
  /* [14][0][][] */ -85,-86,84,61,84,-40,-7,-124,-96,-42,77,66,-49,-99,-127,-79,-77,-61,-31,34,-44,-5,14,58,-103,-67,-51,43,-113,-110,-71,28,82,-30,-38,-1,112,101,32,-98,6,-104,50,102,45,-117,42,-80,88,20,86,44,105,-22,-30,-3,-58,19,72,86,0,-86,-48,83,-72,-23,56,-123,-113,-104,-93,90,-17,66,53,-74,71,-97,55,42,53,-39,-110,-50,-107,-103,-97,99,114,15,59,-50,50,28,-4,55, 
  /* [15][0][][] */ -18,-15,-11,33,48,-118,16,-83,64,-39,-33,-24,54,-4,-119,-97,43,-23,-117,-16,70,-2,96,57,97,25,-6,95,-8,53,19,-127,-47,-28,-101,-75,-30,110,118,-90,-12,74,-11,-22,-20,-99,-79,-50,-44,-112,-4,31,-69,-117,-81,-54,43,18,-13,67,-6,-92,-18,43,-57,58,-101,-28,-95,-4,83,-78,-28,-4,67,-106,6,-1,121,99,-49,2,-74,-53,-100,-48,-61,43,104,91,-127,-73,7,49,-63,115, 
  /* [16][0][][] */ -38,-2,26,-71,57,125,-24,42,-11,52,-110,55,9,-63,-29,-35,123,102,13,65,26,54,-94,78,-64,58,-28,53,-68,23,54,39,-85,90,54,57,-61,-13,-87,-19,34,-16,16,101,83,99,112,-41,-8,-87,11,64,-90,121,64,56,-39,104,22,52,39,118,30,71,70,39,-15,97,52,71,-80,-20,52,46,64,48,10,121,-127,-57,-50,-60,2,-72,34,99,34,-12,19,-23,-2,114,51,-30,-120,-23, 
  /* [17][0][][] */ -1,-123,-4,37,-67,-123,-85,-100,5,-100,40,22,53,18,-120,11,-5,11,57,61,-109,-34,-20,-72,-16,23,-92,-10,54,-69,-56,31,-51,-50,-1,-26,-66,51,-97,-54,-107,-69,-38,-37,-26,-26,60,-120,36,52,-41,-13,-44,32,50,-87,-122,41,-97,-119,-4,-105,28,49,-100,-91,6,-116,-114,-29,58,-5,-15,-127,-81,22,61,-70,3,-79,-20,-46,-90,-107,-120,23,39,-60,-16,30,-111,-121,-37,64,-19,-21, 
  /* [18][0][][] */ -30,52,72,62,-4,-67,-5,10,13,85,-22,-16,-2,87,64,-3,-13,-41,127,-1,84,51,-1,-53,38,-20,-12,47,66,11,21,29,53,-9,-20,9,-56,85,-5,1,-24,18,25,-26,-53,26,-17,-1,-71,60,59,11,-31,-22,31,113,45,11,-28,-69,27,43,27,50,-24,-56,75,98,74,-50,-2,83,-53,30,-19,13,20,-13,-1,-13,15,84,22,31,83,-22,58,57,-15,-39,36,54,126,62,41,58, 
  /* [19][0][][] */ -4,-5,39,8,24,-100,55,53,45,-77,-1,-33,-104,5,-69,25,31,-121,70,23,-45,47,-73,-15,37,-92,0,-84,-102,-126,-78,12,42,-94,4,-25,-18,-82,-72,-112,10,-124,-94,-18,-101,-2,45,-104,-41,7,-58,8,-55,-16,-23,-32,-3,57,-28,-48,19,-75,61,28,-84,-31,-46,-27,-30,22,38,-67,-75,-124,-72,-95,-47,-127,-14,64,24,-120,-49,39,-98,-40,-18,-39,50,-1,-28,30,-51,75,35,-65, 
  /* [20][0][][] */ -37,58,54,47,-92,43,-14,55,33,-21,-66,-17,-33,45,7,-74,-66,-54,-46,-32,56,-60,-26,-84,98,-90,-109,38,1,1,-62,61,49,8,-30,16,71,1,14,-110,-92,-46,-34,-99,-55,-74,-66,102,22,-127,-78,61,66,69,4,-31,64,34,113,44,112,-72,-69,-56,-32,-79,-63,-12,-92,-7,-23,67,-77,-48,10,8,76,42,124,125,105,-27,108,41,26,83,9,68,53,113,1,26,-12,-2,35,23, 
  /* [21][0][][] */ 50,79,66,-92,92,-99,61,11,-23,-79,-47,21,-12,19,-86,-57,-116,-24,-26,5,88,-76,80,-64,59,-75,-32,81,14,14,-2,-50,-28,7,-74,-106,117,71,-87,-2,-15,16,42,14,-104,-65,-63,89,-82,-85,3,79,45,61,-96,3,-63,60,-14,86,65,-69,-1,3,81,19,-44,-73,-111,-8,44,62,21,-25,72,53,-71,-16,60,103,23,49,34,-66,32,-75,58,-60,-71,80,75,-87,-88,-127,64,-26, 
  /* [22][0][][] */ 0,-66,-87,-71,48,-31,69,3,-108,34,-94,-96,59,-127,-92,-85,22,47,-114,-51,-1,-101,-22,18,25,-13,-91,2,-73,-83,-44,-65,15,34,-24,-1,-31,-36,-66,-101,-5,5,-28,24,34,-108,48,-46,-29,-74,-6,-39,-71,-50,-50,15,-66,-28,-49,-27,34,-51,-93,-82,-50,2,-58,-21,63,62,-71,-35,-40,-19,-1,-95,-20,-54,6,27,28,-58,-92,-118,14,38,8,-47,-68,-8,-30,24,-11,30,-60,35, 
  /* [23][0][][] */ 56,-79,-28,13,64,-61,12,-93,-7,-81,27,17,21,-117,8,-28,88,-4,-96,54,24,-93,40,-8,-45,-27,79,-21,17,4,63,-12,-81,48,-11,-13,32,-38,-111,22,-127,14,-21,-82,-30,-71,99,-10,83,-104,-85,-73,24,-26,-62,66,-93,-3,32,61,-110,-53,-27,-23,20,43,-68,-60,65,-17,39,-85,7,-55,-56,-111,-12,-9,38,48,-69,-33,-16,-112,47,15,38,-31,-100,-4,84,-15,17,-31,-61,27, 
  /* [24][0][][] */ -86,-19,-87,-83,-62,-95,-53,-83,41,86,84,26,83,33,-74,-80,-61,67,-28,-27,84,-122,-25,-26,66,-38,70,77,95,66,4,-63,-39,1,40,1,-13,-87,68,29,-66,-71,104,39,19,-29,48,81,-27,-79,-18,36,82,72,54,-87,-33,93,57,-5,110,6,26,100,-76,85,-55,-83,-117,37,-68,-27,-34,23,101,94,83,-46,-81,-54,-62,-127,-57,-106,14,72,-12,-68,41,-72,-7,-68,-66,-43,-77,25, 
  /* [25][0][][] */ -52,-54,-98,-13,61,-38,-61,27,0,-79,-79,-3,48,-11,-74,-23,-40,42,17,-105,2,40,-52,-36,-17,-35,-67,2,46,-92,34,86,53,-65,-5,57,28,-73,-54,-27,-63,69,-107,-56,69,24,43,2,-51,56,-53,-7,-11,3,-44,12,-10,26,-110,66,39,28,35,23,3,55,0,6,-50,-19,-79,-117,27,-81,4,-11,7,31,-24,-26,-14,45,-55,23,-47,-38,-127,-79,-49,-56,79,7,-87,10,-57,-82, 
  /* [26][0][][] */ 49,-127,-50,-39,-108,-4,-38,-42,-121,-86,52,40,-78,-69,-11,-47,90,28,-94,-84,-24,36,44,-7,6,27,-10,1,-23,-32,-99,-8,-46,-48,-105,-113,-87,34,-75,76,-108,46,16,-9,-67,24,-38,47,-2,0,-37,44,-25,-72,-32,-91,44,33,9,-13,-32,-98,12,-47,59,-50,-79,18,-94,34,40,43,37,-109,-102,-30,2,-117,-112,-27,-54,30,32,-93,33,-31,-65,-25,-100,54,-29,-10,-80,58,8,35, 
  /* [27][0][][] */ -24,-19,-74,-113,-127,-90,-87,-36,13,44,0,-108,-55,12,32,-54,17,-45,16,-92,-101,-23,-56,-49,-92,2,-119,-30,21,-3,-57,-40,16,21,-103,-101,-48,-85,-115,35,-106,-15,-11,-17,50,-14,19,47,52,19,12,-89,-97,-95,-37,-60,47,-52,-65,-91,-74,-79,-60,14,-3,-67,-119,51,9,-26,-107,-21,15,-57,-37,-95,6,-52,42,48,39,-55,76,-24,-89,-99,-47,0,-64,-27,-60,-67,13,-17,52,18, 
  /* [28][0][][] */ 48,-31,46,10,-126,-35,-112,-93,-33,-120,23,31,-97,-102,-25,58,51,67,-55,35,-52,-8,-69,-93,-99,41,-101,-80,-91,-94,-29,-44,-116,-14,40,34,15,-75,-64,-2,61,8,-81,15,-121,-36,-16,13,-8,-82,-96,-57,-102,-8,17,5,63,-39,68,16,-35,-65,-63,-24,21,34,-47,41,-96,30,-118,-64,32,31,-33,-113,-127,-55,-57,10,-92,-107,92,-25,24,-124,78,-98,-117,-50,-59,-85,-63,16,-84,-50, 
  /* [29][0][][] */ 7,7,12,-76,-103,-25,-127,-24,48,-46,-104,-110,53,-118,-69,-70,-113,49,-9,-87,-95,-58,8,-29,-65,-29,-68,-58,-115,-39,49,-36,7,-33,-98,-75,-45,52,-42,45,8,50,-66,33,-35,50,-79,-54,-17,-40,16,-117,24,-112,55,4,-105,13,-75,56,-127,45,-112,-75,-82,-84,13,39,44,-104,-5,-91,56,33,16,-15,59,-86,-61,-8,-38,-103,-40,-97,18,58,1,27,-65,42,23,32,-114,-13,-34,14, 
  /* [30][0][][] */ 5,-60,-78,10,-95,13,-65,-19,102,-28,-7,-51,-113,-6,37,2,-18,34,70,-114,21,-107,-113,3,-103,4,-80,108,-24,-100,-98,-8,-92,-84,-127,-69,14,-36,-15,23,83,-79,-25,84,78,-54,75,44,-65,46,10,-96,78,-49,-28,75,-81,-51,-75,-53,-97,-14,-67,-37,-116,-85,-103,66,-76,80,22,-48,-100,85,24,-91,-56,-66,-73,-70,7,1,-102,-20,-109,20,-104,93,-39,-111,50,38,-48,-19,2,-86, 
  /* [31][0][][] */ 33,-98,2,49,10,17,-75,-106,-39,-50,-93,-100,51,-125,-67,62,-77,-102,-7,11,18,0,-52,54,12,-122,1,6,-83,-83,5,55,-16,-13,-99,-37,52,-47,-81,-114,14,-81,-50,0,-28,-74,-59,-7,22,-16,42,-49,-117,-71,-98,-8,-127,25,-24,61,-55,-29,42,-87,25,59,-61,-88,29,-124,-123,-24,-101,-56,-22,-22,-73,-69,14,47,-87,-66,18,33,19,47,-105,-9,-10,-64,-92,-71,-26,56,-42,-52, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.002165371086448431, 0.0024904063902795315, 0.0023784609511494637, 0.002323587890714407, 0.0021636299788951874, 0.0027294654864817858, 0.0022190592717379332, 0.0025212650652974844, 0.0021837705280631781, 0.0025752568617463112, 0.0030418667010962963, 0.0022179360967129469, 0.0023938422091305256, 0.0023932917974889278, 0.0019196800421923399, 0.0020143683068454266, 0.0021525127813220024, 0.0022704710718244314, 0.0040258634835481644, 0.0021505304612219334, 0.0022364875767379999, 0.0022358233109116554, 0.0030023541767150164, 0.0025732312351465225, 0.002047219080850482, 0.0027737910859286785, 0.0023093435447663069, 0.0023110557813197374, 0.0021299815271049738, 0.0022570833098143339, 0.0019706964958459139, 0.0023277951404452324, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data6[96] = { 1392, -406, 3396, 7596, 6044, -5931, 4876, -2232, -3459, -1031, 6542, -4397, 6110, 7440, 2898, 2411, -477, -597, -1063, 5536, 3877, -437, 2616, -1129, -540, 4583, 1187, 2898, 6341, 3472, 4393, 1059, 2200, 6964, 9044, 2332, -678, 6475, 3706, -6198, -1752, 1684, -182, 1385, -1510, -150, -1171, 1258, -13366, 3569, 697, -6712, 7999, -1661, 2441, 1810, 1222, 4103, -2055, -3508, 263, 827, 514, 5799, 7362, 2784, 3545, 4927, 4547, -1659, 4211, 9619, 4248, -2682, 8990, 10025, 307, -4739, 996, 1901, 10325, 3036, -661, -3207, 1207, 1, 1513, -6409, 7893, -1207, 5496, 1558, 237, -3668, -551, 1697, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 8.7181440903805196e-05, 0.00012968522787559777, 0.00016471838171128184, 9.2341913841664791e-05, 0.00010105679393745959, 8.7734799308236688e-05, 9.4587659987155348e-05, 0.00014973300858400762, 0.00012055399565724656, 0.00019871987751685083, 9.6388823294546455e-05, 0.00012998975580558181, 7.5437805207911879e-05, 8.3051716501358896e-05, 9.4212751719169319e-05, 0.00016297635738737881, 0.00016148068243637681, 0.00012645139941014349, 0.000165243458468467, 0.00010037938045570627, 0.00010396337165730074, 0.00012844636512454599, 0.00011447827273514122, 0.00014047956210561097, 0.00017650502559263259, 0.00012888308265246451, 0.00010549209400778636, 0.0001221076090587303, 0.00010440027108415961, 0.00011774999438785017, 9.0399371401872486e-05, 0.000121611803479027, 0.00013639777898788452, 8.6472260591108352e-05, 7.4485971708782017e-05, 0.00021193250722717494, 9.3105547421146184e-05, 7.2321978223044425e-05, 9.5509436505381018e-05, 7.3364550189580768e-05, 0.00010093817400047556, 9.1428322775755078e-05, 0.00013787993520963937, 0.00012817092647310346, 0.00013488062541000545, 7.4674855568446219e-05, 0.00019203698320779949, 0.00011045642895624042, 5.7819805078906938e-05, 9.3598915555048734e-05, 0.00016938491899054497, 7.2278460720553994e-05, 8.66192567627877e-05, 0.00012234842870384455, 0.00011839307990157977, 0.00010736328113125637, 0.00017574802041053772, 8.602346497355029e-05, 0.00013680449046660215, 0.0001285688194911927, 0.00017474165360908955, 0.00011949745385209098, 0.00015033069939818233, 0.00010735676187323406, 7.3905743192881346e-05, 9.8083059128839523e-05, 0.00010375140118412673, 0.00013007759116590023, 0.00013486595707945526, 0.00013760633009951562, 8.8682405475992709e-05, 7.5326279329601675e-05, 8.2583617768250406e-05, 0.00010064028174383566, 7.3562412580940872e-05, 7.7190445153973997e-05, 0.00012411260104272515, 0.00012096677528461441, 0.0001231822679983452, 0.00010049120464827865, 8.1964019045699388e-05, 9.2914320703130215e-05, 0.00022349150094669312, 0.0001268206542590633, 0.00010973332973662764, 0.00018815882503986359, 0.00010497998300706968, 8.5566287452820688e-05, 8.0793543020263314e-05, 0.00011206802446395159, 8.3581748185679317e-05, 0.00014067740994505584, 0.00012881361180916429, 0.00010687233589123935, 0.00012184670777060091, 9.3063499662093818e-05, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -14,81,-94,5,22,-55,127,26,-46,-3,58,-73,78,86,-55,52, 
  /* [1][0][][] */ -39,-24,-43,-10,-30,46,5,-127,44,-36,-40,-67,-23,-60,-60,-11, 
  /* [2][0][][] */ -35,-32,13,67,1,41,-83,127,-33,21,83,-64,1,-60,-28,75, 
  /* [3][0][][] */ 116,-74,102,-8,22,27,-57,127,-7,57,61,26,-54,75,-13,-29, 
  /* [4][0][][] */ -59,-54,-30,16,-61,0,-5,-109,10,2,38,-6,60,15,66,127, 
  /* [5][0][][] */ 123,23,-18,-25,-121,-3,53,41,2,-35,81,127,110,39,-88,36, 
  /* [6][0][][] */ 31,-44,-34,-34,-98,-17,-21,-47,-46,-83,-50,27,53,52,127,-27, 
  /* [7][0][][] */ -44,50,4,-82,16,-37,-43,19,-96,40,-48,-91,-127,-19,-6,100, 
  /* [8][0][][] */ 32,34,54,13,33,33,56,-1,69,-33,26,-10,-127,-36,-78,0, 
  /* [9][0][][] */ -26,58,41,-32,-4,-5,7,2,-35,52,-54,2,32,127,13,7, 
  /* [10][0][][] */ 63,68,-70,35,-80,-20,83,-60,-97,-50,-33,-64,-92,-32,42,127, 
  /* [11][0][][] */ 48,2,53,3,-30,-40,26,86,-71,19,-24,-15,-8,-17,25,127, 
  /* [12][0][][] */ -42,-49,5,11,-15,-30,127,37,-66,37,2,16,-3,68,-42,118, 
  /* [13][0][][] */ -29,-17,10,81,41,73,98,50,-10,87,-107,-88,28,41,-127,-53, 
  /* [14][0][][] */ -99,127,33,9,24,55,30,35,-51,49,72,-19,-119,43,-82,24, 
  /* [15][0][][] */ 8,6,-127,-50,88,-36,-73,-22,-30,-17,-2,-59,6,-56,-35,50, 
  /* [16][0][][] */ 100,-23,-12,-23,44,-35,63,-29,-11,12,127,55,52,-12,-53,35, 
  /* [17][0][][] */ 0,-7,-44,-95,-22,-66,127,-101,3,-2,-20,46,58,54,28,77, 
  /* [18][0][][] */ 46,127,12,-61,60,-67,-8,-48,-7,89,-16,-17,-37,63,-34,-21, 
  /* [19][0][][] */ -63,-127,88,-111,19,-121,56,-73,14,21,95,100,63,-11,74,4, 
  /* [20][0][][] */ -35,80,27,13,-9,-12,47,-43,72,-33,79,-21,-127,-42,-59,-14, 
  /* [21][0][][] */ -29,83,18,35,94,53,71,71,-127,32,-35,42,-11,43,-30,-41, 
  /* [22][0][][] */ 2,-96,8,-9,-18,-113,127,-26,8,-44,-8,-60,71,-80,-37,0, 
  /* [23][0][][] */ -40,-79,15,8,-4,-14,37,-47,30,-16,67,11,21,29,45,127, 
  /* [24][0][][] */ 8,3,9,69,36,42,-66,-127,58,1,-35,12,-20,-12,-22,-35, 
  /* [25][0][][] */ -35,7,2,-88,-70,-11,33,-52,-41,77,-40,8,74,127,34,46, 
  /* [26][0][][] */ -51,85,29,4,37,-74,-9,-28,8,-4,20,46,-8,13,-105,127, 
  /* [27][0][][] */ -35,-127,-30,14,-70,63,-9,-60,21,-23,39,-18,21,-55,-85,-23, 
  /* [28][0][][] */ -33,-1,61,111,57,41,-68,-127,-121,57,97,-41,55,-5,-68,-65, 
  /* [29][0][][] */ -127,72,-6,-17,-46,9,-112,-74,-28,-36,-18,12,-1,-68,-104,43, 
  /* [30][0][][] */ 70,91,-30,55,-97,-73,-72,10,-37,-7,20,-127,76,49,-22,84, 
  /* [31][0][][] */ 127,42,-41,-16,-73,12,82,34,-82,-39,35,37,7,33,-71,-6, 
  /* [32][0][][] */ -45,-42,127,25,-54,64,66,18,-11,10,-18,40,34,65,97,35, 
  /* [33][0][][] */ -12,-12,-81,-48,-55,-12,127,-10,13,4,39,-50,109,75,-22,92, 
  /* [34][0][][] */ -106,-54,68,-4,-16,-90,124,-37,-127,20,68,-19,87,35,-11,-2, 
  /* [35][0][][] */ -14,-11,-59,31,-93,90,-26,-51,3,127,-19,53,-27,37,28,36, 
  /* [36][0][][] */ -28,-108,127,-51,-88,17,-42,-16,20,12,-69,110,-6,-113,-35,55, 
  /* [37][0][][] */ 72,-35,93,-21,110,-85,-82,22,-63,118,-97,16,-127,-72,109,-40, 
  /* [38][0][][] */ 22,8,35,-68,-37,-40,-110,21,-49,30,-110,-46,-91,-127,-70,31, 
  /* [39][0][][] */ -61,45,-90,-73,-93,-85,96,-13,-127,-42,65,108,62,-24,11,113, 
  /* [40][0][][] */ 102,9,14,-118,-72,-4,32,-47,-127,-22,-94,-55,61,72,12,83, 
  /* [41][0][][] */ 57,-94,-48,-27,-19,-23,-63,-11,69,16,-13,-13,127,-87,70,-40, 
  /* [42][0][][] */ -11,-48,-72,127,30,-89,-99,78,-29,8,29,58,-65,99,2,5, 
  /* [43][0][][] */ -63,-29,-58,-127,-50,4,15,63,18,-115,-17,33,0,-31,-23,109, 
  /* [44][0][][] */ -44,2,13,-54,-34,-49,43,73,90,-46,76,88,127,10,0,35, 
  /* [45][0][][] */ 69,115,-115,83,127,-94,-10,-82,95,-73,107,-68,-11,37,-76,108, 
  /* [46][0][][] */ -16,-57,-7,-14,64,-29,39,6,17,127,-9,-88,50,33,-32,83, 
  /* [47][0][][] */ 65,-67,-50,0,69,-37,-16,-67,-7,127,-30,58,0,-123,-80,38, 
  /* [48][0][][] */ -9,45,0,-127,-16,-37,126,-96,11,18,-45,35,63,80,-18,29, 
  /* [49][0][][] */ 9,127,-77,13,26,-39,81,48,-44,7,53,-64,1,85,121,-52, 
  /* [50][0][][] */ 28,58,-9,-18,-127,2,-80,-56,36,51,20,42,-51,-25,-19,25, 
  /* [51][0][][] */ 127,-64,-80,-13,-32,117,-76,-77,72,-27,-64,58,-57,-101,-30,36, 
  /* [52][0][][] */ -32,-79,49,77,-37,-73,-127,-15,-23,-42,-50,-50,-4,-70,3,48, 
  /* [53][0][][] */ -22,62,40,-102,-17,110,95,-29,-32,4,-20,-47,117,-127,19,57, 
  /* [54][0][][] */ -9,121,-12,-28,-24,-94,-68,27,6,-32,-9,127,89,101,30,92, 
  /* [55][0][][] */ -19,33,79,79,92,11,74,127,-69,8,-16,-3,91,74,-28,-55, 
  /* [56][0][][] */ 127,24,-6,31,-76,110,-40,-92,-17,55,-89,15,-48,101,-11,35, 
  /* [57][0][][] */ -48,-48,-79,-71,-84,-101,77,-82,-127,-27,83,51,61,-1,10,92, 
  /* [58][0][][] */ 63,-68,65,28,-1,-67,-35,33,7,-20,-127,-32,25,-24,5,42, 
  /* [59][0][][] */ 75,-3,-102,98,-8,4,84,-27,-66,-68,15,-104,-127,-70,-11,93, 
  /* [60][0][][] */ -17,-10,-18,-10,-16,-26,-6,-27,-53,-89,41,112,-17,-127,-44,19, 
  /* [61][0][][] */ -17,31,47,-87,-62,32,30,54,-13,-82,70,61,54,8,4,127, 
  /* [62][0][][] */ 63,24,-23,-127,-35,-16,17,-53,-20,6,-41,66,48,-29,-95,-62, 
  /* [63][0][][] */ -22,-47,-17,-10,-62,-54,-23,-19,-57,-10,-32,6,127,-11,16,-2, 
  /* [64][0][][] */ 42,14,17,78,-91,-75,-33,-127,61,101,7,-10,20,-41,-85,120, 
  /* [65][0][][] */ -11,11,-22,-32,-48,57,28,-26,38,-98,93,-35,53,29,-127,67, 
  /* [66][0][][] */ -55,127,-50,-32,46,-18,-107,-1,-64,101,68,7,-115,20,34,19, 
  /* [67][0][][] */ -10,-28,-127,-105,66,71,-5,-31,-19,21,44,-24,38,27,23,39, 
  /* [68][0][][] */ 82,45,-25,-45,-39,47,17,55,-18,52,127,-23,-10,-18,-80,1, 
  /* [69][0][][] */ 47,-123,30,-74,33,-127,-17,118,-8,94,80,88,1,19,-38,16, 
  /* [70][0][][] */ 54,30,68,12,93,-20,127,11,5,30,-27,34,-34,77,-94,53, 
  /* [71][0][][] */ -8,13,98,-52,-127,-76,6,7,-11,-16,6,-90,-79,-9,-3,15, 
  /* [72][0][][] */ -53,-108,30,-98,65,-25,-16,46,-67,20,-127,8,61,97,-67,102, 
  /* [73][0][][] */ 2,5,17,9,92,-73,-48,7,-20,108,-81,50,-63,-55,127,-20, 
  /* [74][0][][] */ -114,-32,-79,-47,27,-33,-50,1,-61,7,-127,-21,-35,-75,-56,53, 
  /* [75][0][][] */ 68,-46,66,-29,-10,-6,-127,-39,5,-126,47,12,-4,-28,-30,-16, 
  /* [76][0][][] */ 24,-26,-13,120,65,127,77,-35,102,-121,55,92,3,-45,-92,16, 
  /* [77][0][][] */ -51,-60,101,-27,11,-66,-3,-127,22,9,56,100,57,30,31,46, 
  /* [78][0][][] */ -88,-14,-37,-26,-35,-64,46,-31,48,-30,18,-86,-127,-104,-125,-66, 
  /* [79][0][][] */ -127,-109,-82,38,102,-4,-27,-3,10,22,-38,82,-15,-99,-47,-10, 
  /* [80][0][][] */ -21,-127,12,68,-61,-26,-63,47,-20,42,77,-6,-33,-17,1,84, 
  /* [81][0][][] */ 78,52,3,94,-8,23,12,127,31,13,69,49,77,24,39,-43, 
  /* [82][0][][] */ -45,13,8,-35,54,-127,-92,-78,9,79,-35,-31,-26,95,-83,-18, 
  /* [83][0][][] */ 127,10,80,-30,-28,-10,-95,10,30,-119,55,-87,0,8,41,-15, 
  /* [84][0][][] */ 27,-36,-60,23,127,21,21,45,-118,44,-98,6,20,-5,-72,-3, 
  /* [85][0][][] */ -26,33,6,-13,43,-24,34,-127,68,-14,15,17,80,-63,18,25, 
  /* [86][0][][] */ 127,-22,105,33,-4,-58,88,40,-75,-54,-78,-61,52,29,-63,27, 
  /* [87][0][][] */ 27,34,35,-84,118,-33,-69,53,39,11,84,-50,-110,-127,-25,13, 
  /* [88][0][][] */ -87,-63,25,0,5,24,-58,-72,-10,3,-95,-127,-22,-62,-16,-14, 
  /* [89][0][][] */ -68,29,23,-66,31,26,-127,-1,90,24,-57,11,-42,-83,-43,-34, 
  /* [90][0][][] */ -12,-24,-23,-68,127,-9,-75,39,52,75,15,-5,25,15,-99,-36, 
  /* [91][0][][] */ -23,-37,-7,15,-41,-8,20,18,-23,-33,45,-54,16,45,29,127, 
  /* [92][0][][] */ -47,85,-18,-42,-45,112,-127,47,-50,29,45,-19,-7,80,86,24, 
  /* [93][0][][] */ -19,66,-31,-60,84,60,-92,16,69,61,52,39,-127,15,-58,54, 
  /* [94][0][][] */ 51,95,102,-1,-127,-34,7,2,15,-15,45,-38,-30,1,46,-17, 
  /* [95][0][][] */ -27,24,24,3,127,0,-76,66,38,19,-70,96,-48,-1,69,-56, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.0012266164412721992, 0.0018246317049488425, 0.0023175375536084175, 0.0012992226984351873, 0.0014218384167179465, 0.0012344019487500191, 0.0013308196794241667, 0.0021066979970782995, 0.0016961580840870738, 0.0027959283906966448, 0.0013561614323407412, 0.0018289164872840047, 0.0010613870108500123, 0.0011685123899951577, 0.0013255447847768664, 0.002293027937412262, 0.0022719842381775379, 0.0017791328718885779, 0.0023249252699315548, 0.0014123073779046535, 0.0014627330237999558, 0.0018072014208883047, 0.0016106745461001992, 0.0019765046890825033, 0.0024833721108734608, 0.0018133459379896522, 0.0014842416858300567, 0.0017180170398205519, 0.0014688801020383835, 0.001656706677749753, 0.001271891756914556, 0.0017110412009060383, 0.0019190753810107708, 0.0012166384840384126, 0.001047995057888329, 0.002981825964525342, 0.001309966784901917, 0.0010175482602789998, 0.0013437888119369745, 0.0010322169400751591, 0.0014201694866642356, 0.0012863687006756663, 0.0019399287411943078, 0.0018033259548246861, 0.0018977293511852622, 0.0010506525868549943, 0.0027019020635634661, 0.0015540884342044592, 0.00081350712571293116, 0.0013169082812964916, 0.0023831943981349468, 0.001016936032101512, 0.0012187066022306681, 0.0017214053077623248, 0.001665754709392786, 0.0015105687780305743, 0.0024727212730795145, 0.0012103240005671978, 0.001924797659739852, 0.0018089242512360215, 0.0024585619103163481, 0.0016812928952276707, 0.00211510737426579, 0.0015104770427569747, 0.0010398313170298934, 0.001379998866468668, 0.0014597506960853934, 0.0018301521195098758, 0.0018975230632349849, 0.0019360793521627784, 0.0012477345298975706, 0.001059817848727107, 0.0011619264259934425, 0.0014159781858325005, 0.0010350007796660066, 0.0010860461043193936, 0.0017462265677750111, 0.0017019658116623759, 0.001733137178234756, 0.0014138807309791446, 0.0011532088974490762, 0.0013072763103991747, 0.003144457470625639, 0.0017843281384557486, 0.0015439146663993597, 0.0026473375037312508, 0.001477036508731544, 0.0012038917047902942, 0.0011367406696081161, 0.0015767631120979786, 0.0011759698390960693, 0.001979288412258029, 0.0018123683985322714, 0.0015036612749099731, 0.001714346231892705, 0.0013093751622363925, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data8[16] = { 5017, 1889, -4248, -2062, -6287, 10716, -1259, -5153, 15268, -5579, -10764, 5900, -15455, 5330, 1121, 11327, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 5.3785264753969386e-05, 6.8062028731219471e-05, 4.0015034755924717e-05, 4.2360563384136185e-05, 5.413005783339031e-05, 7.2024246037472039e-05, 6.1291168094612658e-05, 5.3756790293846279e-05, 6.9497764343395829e-05, 6.1006714531686157e-05, 5.7522396673448384e-05, 5.1896142394980416e-05, 5.1430153689580038e-05, 5.1578805141616613e-05, 6.2677616369910538e-05, 7.1065427619032562e-05, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -80,53,66,-23,-51,6,-87,-17,-36,40,-16,-36,29,17,7,2,3,-3,61,24,7,-41,127,60,10,9,4,2,-29,-56,-12,8,-32,-58,35,5,22,38,39,17,-25,17,-51,5,-42,-22,-28,54,15,-13,-16,-4,-8,-34,6,-40,-45,39,13,78,54,34,-23,-14,18,-25,-16,51,-27,-44,-31,-24,-11,26,-55,-30,-52,16,-9,-5,-21,38,70,-50,15,42,30,39,44,-14,-11,-52,-43,-41,-30,11, 
  /* [1][0][][] */ 25,36,43,-12,-30,-6,-36,4,0,54,30,-49,-11,-15,-70,-8,-3,13,-61,31,-12,-63,36,26,-5,-52,16,-46,81,-70,127,-33,34,23,-15,22,20,59,39,-20,-9,40,17,-12,21,28,-117,-36,-24,-55,6,-3,46,-59,-15,36,25,1,-3,17,33,58,0,-67,15,28,-30,30,20,12,-92,-2,-56,6,16,-51,-5,47,39,-40,2,-21,-36,-20,13,-14,6,39,-37,-8,-41,5,9,30,-13,53, 
  /* [2][0][][] */ 83,-50,27,28,41,-70,62,24,-42,-24,-39,19,-34,-37,15,-23,-86,-12,-22,27,21,-30,-53,40,-39,-82,-20,-6,-44,60,-52,127,-70,116,-20,17,24,3,-32,7,-58,51,45,8,-65,-22,-1,6,16,0,-5,-20,26,-5,2,70,40,3,39,-3,-19,3,-32,24,69,9,21,-12,12,49,-16,-3,40,24,69,14,47,-45,40,53,66,-6,-54,10,-40,11,8,42,-10,-2,-41,29,-23,83,-36,-1, 
  /* [3][0][][] */ 7,3,1,-5,0,13,-30,-75,-24,96,-8,44,77,-20,-95,67,-15,-48,55,36,3,115,50,-30,-3,25,-20,-3,57,-11,103,-10,-31,5,-13,0,50,98,67,-5,-71,-27,-57,3,-52,45,18,46,0,-75,24,-7,24,-116,-41,-52,46,127,-20,15,-1,-17,-60,0,86,66,-45,21,-15,13,-2,-70,-32,-32,62,-32,1,-26,-27,-25,-5,4,-54,8,8,-45,60,-12,16,37,16,-47,42,27,-28,74, 
  /* [4][0][][] */ 15,21,-36,30,24,24,-79,0,-26,115,72,20,43,16,-9,-41,-4,14,-8,60,37,-47,65,102,-101,-4,-127,-18,-37,11,51,32,-66,-66,30,48,26,49,55,21,-27,-20,54,-33,-12,13,-55,38,-11,45,62,21,21,-32,-54,46,45,49,31,-15,21,-27,0,-24,4,21,7,44,-27,47,-34,50,-14,-40,0,-64,32,-62,-2,24,-9,95,-59,-18,-15,-2,54,-48,63,-8,18,-37,-52,-3,51,28, 
  /* [5][0][][] */ -101,34,33,18,71,-34,72,-56,-44,28,12,-15,59,-9,-44,-57,9,-25,37,18,-105,-1,-76,29,-31,-8,14,-13,73,-40,21,66,71,127,-32,42,-22,16,63,-2,-48,80,86,-16,0,48,27,-21,-17,32,-38,13,35,-52,41,-64,40,-63,-82,-72,56,102,-33,-37,86,-34,-68,-53,-66,10,-43,-15,-46,4,-19,-24,-18,-82,-57,-33,106,-44,14,-107,-107,21,57,6,-70,20,41,10,-34,37,-11,65, 
  /* [6][0][][] */ 64,3,-50,8,-48,-95,115,81,-31,44,-9,66,-127,-83,89,64,-23,-53,-2,-6,15,7,-57,-62,-29,77,66,62,21,34,65,-81,14,16,15,-54,23,-37,-1,36,30,6,-54,-36,-21,-47,-41,8,31,-105,-21,63,22,35,-45,-88,71,16,31,-32,-110,35,-105,23,-42,-19,-10,20,34,23,17,-70,2,36,65,11,74,-7,46,-50,-15,-40,-65,101,30,-27,30,4,-6,62,15,28,2,10,-4,116, 
  /* [7][0][][] */ 28,127,-11,-61,-31,1,20,-27,-57,56,-47,-35,-3,-5,19,14,-54,-50,-13,66,-5,125,30,49,4,-21,18,34,34,83,122,-33,51,-2,-2,2,32,0,51,11,-46,-3,16,-57,-5,-61,75,-12,56,-94,-61,-14,-54,4,-22,10,44,36,-74,18,-12,88,-2,-12,14,20,-43,60,-18,3,-112,38,19,93,11,24,-53,46,20,-50,20,-38,61,-59,51,-2,-4,-21,13,64,-95,21,59,-16,-35,-10, 
  /* [8][0][][] */ -9,69,-63,51,-14,-21,-85,46,-103,-29,1,-4,-35,43,24,63,8,-61,5,17,14,-28,22,-25,-71,63,7,-4,-8,-22,-59,-15,-18,-47,5,-50,-53,53,47,29,-21,-34,43,6,-25,-28,-13,25,-42,1,82,88,-32,-14,-45,120,-47,28,4,-23,-32,-18,42,64,-3,-48,-36,-11,-25,24,-8,14,-24,-54,-96,-25,-29,37,-66,-56,-26,34,-28,-55,-14,-16,-2,44,-8,73,-49,-21,-114,-127,7,-55, 
  /* [9][0][][] */ -36,28,-98,55,-56,-57,53,18,-28,64,-29,107,-19,-3,-1,116,48,19,79,25,4,15,27,-80,-38,8,4,-38,21,-1,94,61,-15,1,-6,-99,10,-16,-4,6,-29,37,64,6,-6,-1,-8,3,68,78,26,-38,-38,-96,13,24,-1,8,54,-20,-53,80,-58,-61,127,-8,-11,57,-79,39,33,26,-41,77,-13,-13,-66,-7,-64,-15,91,-36,61,-9,-1,-23,-8,-19,-73,6,22,20,72,21,-28,-17, 
  /* [10][0][][] */ 56,26,-25,-24,-59,-32,63,-24,36,-11,19,-12,-84,-25,20,11,-73,-36,1,6,35,28,20,7,-13,85,45,21,-39,-58,-7,-40,55,-47,55,-19,74,-91,92,88,24,-58,2,20,-9,-70,-10,39,60,56,-64,-42,-11,7,-13,27,16,-67,93,44,-4,82,-80,-8,-36,-44,-4,48,21,-20,-34,42,127,46,-3,-74,18,-39,70,-1,-60,20,24,56,-12,17,7,28,-18,-3,32,39,37,27,-13,27, 
  /* [11][0][][] */ -44,-47,7,-75,30,-26,-73,-61,57,-65,4,-29,-2,-4,24,29,-62,-28,74,-9,-84,-18,-101,-66,12,-2,-51,46,34,-71,-21,-7,26,14,37,-9,-60,25,-91,22,-86,47,-50,71,62,9,4,-18,-1,-53,-42,-36,-16,22,62,-72,-70,-43,40,-34,-9,-36,20,-87,25,-103,29,71,127,2,65,-34,-1,20,60,-33,73,69,45,66,25,9,-54,97,96,33,4,-31,-54,-51,-1,3,51,40,57,90, 
  /* [12][0][][] */ 56,-10,14,-55,9,78,19,24,81,17,29,58,-9,30,49,25,-77,39,25,47,127,13,74,-64,68,60,-81,-26,-35,95,-8,-27,34,-9,18,-54,53,-46,-37,-61,44,-31,33,52,-37,39,35,-50,-58,27,-22,-3,-23,5,-15,-20,-74,45,32,23,-2,-68,-4,-73,-66,73,-37,-45,-8,-24,62,20,19,31,-18,39,2,48,-59,-1,-23,16,123,60,5,99,-17,-78,101,11,-88,55,98,-12,4,-60, 
  /* [13][0][][] */ -36,89,3,-58,-55,-1,-9,-72,23,-4,-30,-73,61,-125,-15,-19,-37,-42,-68,-19,-86,3,47,120,23,8,108,34,16,0,101,20,11,-30,-101,86,-21,-90,84,-81,127,10,-22,16,-22,-93,80,-25,120,-32,-34,4,20,15,-37,66,103,-43,-16,-9,28,49,-33,-82,-33,49,-67,94,-52,-24,-122,13,-47,62,-42,-102,-94,30,51,97,10,67,38,-55,76,85,30,-44,17,-2,-27,1,-31,26,0,5, 
  /* [14][0][][] */ -33,62,-113,-36,78,115,-127,-37,37,-29,98,-5,17,-44,-17,-50,-85,9,46,126,9,-29,4,20,66,-3,-54,87,32,-26,6,23,78,-5,-24,7,-60,35,101,24,29,-2,18,32,1,-52,80,-32,37,-20,-3,-39,38,28,-75,22,27,77,-70,-22,-28,-57,-51,-105,25,-46,-84,31,-57,70,-39,68,21,-11,-17,-49,25,-15,-77,-42,36,19,17,-27,-16,91,-2,-38,-17,70,68,28,24,-17,-61,-72, 
  /* [15][0][][] */ -39,-38,50,-81,-6,-21,4,-51,6,4,31,48,-28,-41,75,84,-108,-36,26,-68,7,-13,-21,-67,90,4,58,-8,-60,-99,-76,-6,-36,43,66,-99,3,-74,-5,-50,6,-41,6,-5,-26,18,79,80,-30,9,-26,-47,-36,66,-13,-70,-74,-48,97,-11,-26,13,-95,40,-127,-11,-20,-9,31,-48,67,-13,98,-33,-49,-60,20,18,51,0,-27,31,33,60,26,25,-117,-7,-7,-26,-81,30,53,-34,-10,62, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.0022858737502247095, 0.0028926362283527851, 0.0017006389098241925, 0.0018003238365054131, 0.0023005274124443531, 0.003061030525714159, 0.002604874549433589, 0.0022846634965389967, 0.0029536548536270857, 0.0025927852839231491, 0.0024447017349302769, 0.0022055860608816147, 0.0021857814863324165, 0.0021920991130173206, 0.0026637986302375793, 0.0030202805064618587, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data10[96] = { 4097, 1707, -1533, -7064, -4524, 5561, -7686, 1829, -2307, -2836, 7569, -4964, -490, 16463, 3364, -9821, 26029, 4160, -4293, -1310, -1880, 3932, 180, -579, 216, -3132, 5463, -7340, -3349, -6717, -3038, 2512, 12223, 1211, -4807, 214, -7028, -3377, 640, 5919, -5374, -7131, 5669, -3625, 12134, 13590, -1795, 9046, -6931, 12889, 13544, -2365, -1045, -3442, 930, 18075, -1158, 9, 10569, 12821, 8888, 9934, 8535, -16147, -3036, -2, -2765, -85, -14192, -1542, -1142, 373, 13502, 1460, -5853, 11565, 4819, -123, 11511, -3623, 277, 4841, -6080, 7324, 14673, -3907, -3000, -7751, -16204, -4314, 21263, 1556, 32, -2097, -6834, -6364, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 0.00027592433616518974, 0.00017691602988634259, 0.00016445112123619765, 9.1486697783693671e-05, 0.00016248495376203209, 0.00018065638141706586, 0.00023206816695164889, 0.00028442041366361082, 0.00018551683751866221, 0.00012456574768293649, 9.5493611297570169e-05, 0.00011060084216296673, 0.000224473507842049, 9.8806674941442907e-05, 0.00020518571545835584, 7.4117320764344186e-05, 7.3177383455913514e-05, 0.00018526644271332771, 0.00017320395272690803, 7.0172383857425302e-05, 0.00012683228123933077, 0.00019233823695685714, 0.00015582345076836646, 0.00027961350861005485, 0.00031273078639060259, 0.00021718302741646767, 0.00020622284500859678, 7.4588650022633374e-05, 0.00018433942750561982, 0.00011737948807422072, 0.00018504275067243725, 0.00012924526527058333, 0.00016735700774006546, 0.00013778341235592961, 0.00016009417595341802, 0.00049345707520842552, 9.9121665698476136e-05, 0.00016112359298858792, 0.00029839444323442876, 0.00010977849888149649, 0.00013334047980606556, 0.00011315966548863798, 0.00018492249364499003, 0.00013758697605226189, 8.4006685938220471e-05, 8.0099802289623767e-05, 0.00012614851584658027, 9.5285126008093357e-05, 0.00012604740913957357, 8.3194208855275065e-05, 6.5775559050962329e-05, 7.5808071414940059e-05, 8.2607846707105637e-05, 0.00014790960995014757, 0.00015163130592554808, 0.00011429783626226708, 0.00013167479482945055, 0.00016701826825737953, 0.00012922982568852603, 8.1464007962495089e-05, 0.00011572664516279474, 0.00015180410991888493, 0.00014333729632198811, 6.9255613198038191e-05, 0.00013216382649261504, 0.00018252176232635975, 0.00013051665155217052, 0.00018436710524838418, 9.615158342057839e-05, 0.00022475038713309914, 0.00016606491408310831, 0.00010607319563860074, 0.00013186631258577108, 0.00018073209503199905, 0.0001705150498310104, 0.00011708477541105822, 0.0001018608090816997, 0.0001076080952771008, 0.00011270731192780659, 9.2675145424436778e-05, 0.00012291045277379453, 0.00011753600119845942, 0.00013656551891472191, 0.00017107870371546596, 7.6081385486759245e-05, 0.00015568311209790409, 0.00011580030695768073, 9.2006455815862864e-05, 0.00013670575572177768, 0.00017712589760776609, 6.6716944274958223e-05, 0.0002421204699203372, 0.0001412647106917575, 0.00014158125850372016, 7.0992362452670932e-05, 0.00019260437693446875, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ 7,127,-17,56,-12,-19,65,42,34,-70,-85,38,-14,-51,58,-44,-58,10,5,97,50,44,69,127,76,29,-38,-13,34,35,30,-48,-37,17,-24,127,60,79,-24,-36,19,-44,-30,-8,-127,-88,29,1,7,-45,-72,-19,4,55,7,-17,-59,-72,33,-127,-18,-32,-77,23,0,45,105,-33,34,42,69,16,-50,9,90,26,-4,-92,-127,75,28,-7,98,-114,-127,-17,23,-55,-26,-12,-127,28,70,18,48,29, -51,-15,-8,75,7,115,6,-11,73,34,-127,95,-20,-108,-127,108,-63,8,44,127,127,-2,127,1,40,-2,-12,115,33,127,-9,-127,24,101,17,67,109,89,-37,-127,127,31,55,127,-78,-127,127,-33,2,-113,-17,-84,-39,127,-45,-127,32,15,-127,-83,-42,-127,20,117,37,105,46,-9,-30,127,127,-1,-82,9,27,-44,1,-115,-16,127,-13,51,127,-108,-96,-5,79,25,118,82,-113,4,127,4,113,79, 3,-94,-19,-11,1,-33,12,26,22,86,-41,-5,-13,40,114,-26,6,26,9,66,46,52,77,91,119,-21,34,100,71,-31,3,-82,-49,-78,-25,16,14,-14,-3,46,-30,23,-32,-6,43,-91,21,38,21,-113,-36,60,-9,9,-4,-40,40,-77,29,-65,-88,65,-52,45,52,40,-127,6,-23,4,46,6,-32,-17,51,-3,-74,-29,-13,30,-14,24,62,-46,-7,-30,-57,-2,-22,-40,-68,35,36,85,-33,9, 
  /* [0][1][][] */ 65,19,32,127,13,-77,127,16,11,-127,-49,127,3,-127,-104,78,-107,-30,63,88,-62,-14,-120,-27,3,31,-127,97,-35,98,127,51,-22,60,11,93,-73,127,-37,-12,90,-115,5,14,-124,-45,44,-127,-101,-35,-127,25,127,-25,59,-27,-127,-18,-18,-23,-127,-51,-47,20,-98,-39,50,-115,31,49,-16,-115,-101,43,127,-118,86,107,-116,-61,127,-127,1,94,-109,35,-5,46,43,30,-94,13,13,-95,127,4, -127,32,-28,89,-74,-127,-101,-127,103,21,7,123,-60,-52,44,126,-115,-127,127,110,40,-127,-89,-18,-127,127,-5,123,-51,-15,-91,17,-127,38,127,-64,52,117,127,-46,-24,46,5,67,53,-61,-58,-49,6,-74,-52,127,122,38,19,-52,20,14,50,-31,-46,-31,-127,127,31,-127,93,127,61,13,-101,-54,28,21,-121,-96,127,127,92,-76,-92,54,-43,62,-41,-56,127,127,127,127,-71,-127,-83,-70,85,127, 19,-44,23,85,12,-53,43,22,-22,78,-74,72,-1,-23,15,46,-24,-15,0,-1,-111,-10,-47,-81,14,-49,66,-66,127,123,26,-76,-13,-127,-2,57,-83,94,-57,13,21,127,9,35,27,-72,24,-67,127,-127,-7,-29,112,-34,-127,-20,87,-16,-114,42,-88,-23,-45,12,127,-58,-94,-4,-27,19,-49,-48,-119,-127,6,-127,-58,5,-116,-25,-102,-123,-28,127,-9,2,-22,16,13,-68,-36,25,13,127,-9,-18, 
  /* [0][2][][] */ 24,-114,8,25,31,23,52,24,-12,-56,-8,-71,-3,-55,35,127,-127,20,-15,112,-10,24,-51,-14,77,80,-31,89,7,39,27,30,-22,3,-21,-42,60,69,7,-100,20,56,-35,-47,-57,18,-39,-26,0,25,-100,28,-14,2,-36,-6,-29,24,44,4,-16,8,4,57,-19,80,-26,-10,92,36,60,70,-12,11,10,42,-80,-37,-42,-9,-4,38,-33,-72,-101,55,-81,39,-13,47,-6,4,-35,-5,25,-18, -66,-10,127,-34,127,114,26,-13,-127,28,-22,-86,127,-17,-46,-19,-20,19,10,-100,-15,-3,21,-15,112,-43,-39,127,-31,78,4,14,-30,17,23,-54,127,60,54,-82,10,46,-127,53,-69,51,-77,-35,42,-26,-94,94,110,-60,-60,-93,-3,127,-92,-16,77,-109,64,109,16,17,-92,44,127,10,37,127,-127,-1,-24,-48,-45,-73,-61,-107,-26,-18,-41,-83,-59,127,31,88,102,34,43,1,-48,-27,37,9, -1,25,13,-51,30,-24,18,12,13,61,-4,-102,18,-33,113,47,-86,-1,-19,-11,-62,16,3,-45,3,46,-20,124,-12,-55,-1,-38,-6,-50,-4,-29,42,-20,-1,-19,19,55,-10,-46,-14,-15,-16,11,64,-5,-66,32,-79,-20,-8,-24,11,-3,22,27,25,71,-20,43,38,8,-78,38,35,24,5,92,33,-24,0,-40,-86,-24,31,32,-39,-25,-31,-29,-6,43,-10,73,-13,-22,-7,4,-5,-2,10,10, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.015446027740836143, 0.0099036209285259247, 0.0092058451846241951, 0.0051213535480201244, 0.0090957805514335632, 0.010113002732396126, 0.01299099437892437, 0.015921631827950478, 0.010385086759924889, 0.0069730929099023342, 0.0053456574678421021, 0.0061913486570119858, 0.012565851211547852, 0.0055311201140284538, 0.011486135423183441, 0.0041490294970571995, 0.0040964125655591488, 0.010371070355176926, 0.0096958214417099953, 0.0039281952194869518, 0.0070999716408550739, 0.010766943916678429, 0.0087228743359446526, 0.015652544796466827, 0.017506424337625504, 0.012157735414803028, 0.011544193141162395, 0.0041754143312573433, 0.010319177061319351, 0.0065708118490874767, 0.010358547791838646, 0.0072350483387708664, 0.009368513710796833, 0.007713007740676403, 0.0089619467034935951, 0.027623340487480164, 0.005548753309994936, 0.0090195722877979279, 0.016703886911273003, 0.0061453143134713173, 0.007464295718818903, 0.0063345893286168575, 0.010351816192269325, 0.0077020111493766308, 0.0047026285901665688, 0.0044839242473244667, 0.0070616952143609524, 0.0053339865989983082, 0.0070560351014137268, 0.0046571465209126472, 0.0036820641253143549, 0.0042436765506863594, 0.004624322522431612, 0.0082798637449741364, 0.0084882015362381935, 0.006398303434252739, 0.0073710521683096886, 0.0093495519831776619, 0.0072341845370829105, 0.004560291301459074, 0.0064782868139445782, 0.0084978751838207245, 0.008023909293115139, 0.0038768749218434095, 0.0073984274640679359, 0.010217425413429737, 0.007306219544261694, 0.010320725850760937, 0.0053824903443455696, 0.012581350281834602, 0.0092961834743618965, 0.0059378943406045437, 0.0073817730881273746, 0.010117241181433201, 0.0095452992245554924, 0.0065543139353394508, 0.0057020881213247776, 0.0060238167643547058, 0.00630926713347435, 0.0051878821104764938, 0.0068804305046796799, 0.0065795732662081718, 0.0076448307372629642, 0.0095768515020608902, 0.0042589763179421425, 0.008715018630027771, 0.0064824102446436882, 0.0051504494622349739, 0.0076526813209056854, 0.0099153686314821243, 0.0037347620818763971, 0.013553714379668236, 0.0079078879207372665, 0.0079256081953644753, 0.0039740968495607376, 0.010781842283904552, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data12[96] = { 8566, 4500, 1350, -1045, 6554, 12909, 8341, 2308, -667, 9120, 616, -2580, 2225, 5934, 1075, 369, 7626, 4601, -1201, -310, 5444, 11128, 12357, -1647, -4926, -2500, 9613, -665, 1322, 4619, 4928, -518, 11568, 4817, 5077, -10145, 68, -4610, -824, 3502, 7536, 470, 3984, -1710, 478, 3206, 6461, 4504, 4042, 3056, 8855, 1928, -3229, 1583, 770, 3919, 4144, 3832, 8945, 1820, -2628, 6105, 3035, 7914, 3409, 12120, -3499, 5135, 6896, -2447, 10868, 3418, 1948, 7230, 4482, 3356, -359, 1737, 2054, 6551, 3059, 3492, 10282, 1708, 1369, 4640, 548, -388, 10369, -1209, 3679, -2008, 10540, 3901, 249, -1065, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 8.1415237218607217e-05, 9.6847201348282397e-05, 0.00014084497524891049, 0.00012274085020180792, 0.00010555666085565463, 6.596551975235343e-05, 9.4592280220240355e-05, 0.00012741831596940756, 9.88539177342318e-05, 7.9038312833290547e-05, 0.00016950623830780387, 0.00012050419172737747, 0.00021347086294554174, 9.0211571659892797e-05, 0.00014545461453963071, 0.00016160009545274079, 8.556493412470445e-05, 0.0001218608085764572, 0.00011412582534831017, 9.7146861662622541e-05, 0.00010702565487008542, 7.2961251134984195e-05, 7.0886228058952838e-05, 0.00012992492702323943, 0.00011975171219091862, 0.00010729476343840361, 8.3257284131832421e-05, 0.00011753552098525688, 0.00012393901124596596, 7.9639925388619304e-05, 0.00011594376701395959, 0.00019687034364324063, 7.2193048254121095e-05, 0.00010958193888654932, 0.00012716591299977154, 7.0596899604424834e-05, 0.00016549433348700404, 0.00011642807658063248, 0.00014391142758540809, 0.00010682603169698268, 7.4737938120961189e-05, 0.00025675081997178495, 0.00010991002636728808, 0.00011358816846041009, 0.00024059224233496934, 0.00010272775398334488, 8.5433108324650675e-05, 0.00011951518536079675, 0.00011695858847815543, 0.00012466633052099496, 8.5046383901499212e-05, 0.0001524265535408631, 0.00011722296039806679, 0.00012732009054161608, 0.00016918650362640619, 0.00012197965406812727, 0.00010243317228741944, 9.9541808594949543e-05, 7.5479634688235819e-05, 0.00011299193283775821, 0.00012785046419594437, 0.00010869634570553899, 0.00016235212387982756, 9.62627018452622e-05, 0.00013182028487790376, 6.5744199673645198e-05, 0.00011766640818677843, 8.3773949882015586e-05, 9.1673224233090878e-05, 0.00011171864753123373, 7.7104370575398207e-05, 0.00010050740092992783, 0.00016341966693289578, 7.0376692747231573e-05, 0.00013138148642610759, 8.8722990767564625e-05, 0.00012718176003545523, 0.00010028075485024601, 0.00012474869436118752, 8.246987999882549e-05, 0.00013855447468813509, 0.0001038044283632189, 7.497517071897164e-05, 0.00011349664418958127, 0.00018199387704953551, 0.00012095912097720429, 0.00015208691183943301, 0.00016377119754906744, 7.8299330198206007e-05, 0.00013626735017169267, 9.1866008006036282e-05, 0.00011002079554600641, 7.850251131458208e-05, 0.00012017439439659938, 0.0002170485386159271, 0.00011370053107384592, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ -29,9,26,-54,-23,2,-89,-56,60,-18,4,-24,58,-112,28,-127, 
  /* [1][0][][] */ -76,13,-117,-86,-127,22,14,23,31,3,88,-37,117,74,17,66, 
  /* [2][0][][] */ -46,-45,-45,22,-25,-47,1,-46,-127,111,14,-6,47,62,-87,62, 
  /* [3][0][][] */ -52,-97,-1,-27,-113,-13,-65,-127,7,20,29,-72,-85,-57,-109,-33, 
  /* [4][0][][] */ 40,-18,-7,-5,-20,-9,-127,12,-1,61,-6,41,20,-7,-39,-89, 
  /* [5][0][][] */ -55,32,-16,-42,35,-33,2,-74,106,9,6,-40,42,-127,-120,-81, 
  /* [6][0][][] */ 4,-19,7,-14,-40,42,17,-40,-39,-71,127,8,-14,41,-89,-22, 
  /* [7][0][][] */ -7,72,127,-53,6,93,-57,-21,0,71,-109,2,3,-2,51,77, 
  /* [8][0][][] */ -89,-49,56,-12,25,86,63,102,-42,42,-122,-127,78,30,-80,-57, 
  /* [9][0][][] */ 38,-17,57,51,-95,68,-102,-127,32,20,59,19,-48,-101,-2,-6, 
  /* [10][0][][] */ 16,-81,-16,-74,-127,100,38,33,-24,-25,-2,59,-40,52,-92,22, 
  /* [11][0][][] */ 55,-24,-5,78,-81,-13,83,10,127,75,-20,15,2,-47,-20,102, 
  /* [12][0][][] */ -39,-84,127,4,84,44,-5,66,52,24,37,17,-36,14,-103,27, 
  /* [13][0][][] */ -57,-13,21,12,29,36,127,74,-109,26,23,0,16,105,110,-85, 
  /* [14][0][][] */ 127,-38,122,-6,43,35,66,60,53,24,91,51,58,-9,50,-11, 
  /* [15][0][][] */ 3,113,-36,-24,31,127,-77,36,-33,19,-54,7,-16,90,-19,-66, 
  /* [16][0][][] */ -99,38,127,-86,62,106,7,0,-49,14,-54,7,94,-15,35,123, 
  /* [17][0][][] */ 10,126,30,-67,15,-43,-3,-18,-55,89,16,65,-69,-1,127,-51, 
  /* [18][0][][] */ -95,-18,-45,-62,127,50,-56,-28,44,95,85,64,-36,110,-63,-31, 
  /* [19][0][][] */ -19,116,90,116,41,-62,-15,59,-27,119,57,127,44,92,-49,60, 
  /* [20][0][][] */ 28,-41,-24,78,-62,-17,15,14,-68,-29,-127,-61,73,-57,-28,50, 
  /* [21][0][][] */ -127,-96,-56,116,-38,30,-94,56,35,-31,67,12,-15,93,-73,46, 
  /* [22][0][][] */ -12,-23,-30,-67,127,8,-31,12,41,60,1,37,-6,-11,-31,-6, 
  /* [23][0][][] */ -59,31,1,-20,25,24,127,95,4,93,14,-13,-15,31,-66,-9, 
  /* [24][0][][] */ 36,-123,45,28,120,4,127,-123,125,53,50,39,-28,7,0,-24, 
  /* [25][0][][] */ 127,-17,38,4,-11,-3,-1,33,109,-1,-26,15,125,-36,96,48, 
  /* [26][0][][] */ 35,-12,127,89,28,-4,-39,-25,31,41,23,127,46,-67,42,-52, 
  /* [27][0][][] */ -5,39,-29,-4,-1,58,-3,-127,36,-103,122,55,41,-60,117,39, 
  /* [28][0][][] */ -71,37,-93,-103,-17,-49,11,-59,-121,84,-51,-47,-5,58,-75,127, 
  /* [29][0][][] */ 92,65,-120,84,28,127,-54,-16,14,85,24,88,-96,42,20,98, 
  /* [30][0][][] */ -46,65,-127,-14,49,-56,15,54,-23,54,-23,-2,31,37,14,72, 
  /* [31][0][][] */ -26,-127,78,39,65,-45,-83,5,-12,42,-12,4,-62,12,-5,80, 
  /* [32][0][][] */ -62,53,-8,17,-109,61,29,20,63,-117,23,-127,30,23,30,41, 
  /* [33][0][][] */ -97,-14,16,122,-23,17,-5,-12,-20,-45,6,-24,-31,-28,-14,127, 
  /* [34][0][][] */ 15,-10,-89,-58,84,-34,-18,124,-7,14,-26,-14,-48,-23,-75,127, 
  /* [35][0][][] */ 90,-4,37,-29,21,31,-86,-9,-11,-127,-45,25,-5,-44,92,-24, 
  /* [36][0][][] */ -11,24,-120,-28,35,127,19,33,-6,-13,43,40,-3,18,-93,64, 
  /* [37][0][][] */ 44,-3,95,-16,34,-127,37,24,-77,70,-63,-9,9,45,109,93, 
  /* [38][0][][] */ 8,127,53,-51,23,33,57,-95,17,-21,-110,-4,-45,-86,-92,-6, 
  /* [39][0][][] */ 42,10,-127,-79,-10,-6,-30,-85,29,36,-22,-36,44,-31,-118,-106, 
  /* [40][0][][] */ -89,8,-102,-118,-101,-32,27,-127,-34,-52,27,-29,46,116,78,102, 
  /* [41][0][][] */ -6,-54,-9,127,11,-22,-55,27,-16,-26,37,-50,-40,1,29,-22, 
  /* [42][0][][] */ -24,58,4,-127,-1,-5,38,-62,95,0,-76,-6,91,-38,-51,-8, 
  /* [43][0][][] */ 16,63,-27,2,127,10,45,36,-10,46,26,-52,-90,-9,-11,-1, 
  /* [44][0][][] */ 69,9,-2,19,8,20,4,58,10,6,40,-7,127,23,-38,-25, 
  /* [45][0][][] */ 17,-53,-78,20,-62,-61,31,82,7,-36,27,18,-56,127,53,-12, 
  /* [46][0][][] */ -60,-69,18,123,-52,13,-83,38,6,-97,58,-15,13,100,127,127, 
  /* [47][0][][] */ -23,-63,38,104,4,-37,58,41,-7,-90,-127,-27,21,10,-58,40, 
  /* [48][0][][] */ -71,35,-11,31,-25,110,-19,-111,23,-9,8,-37,43,-127,-35,-15, 
  /* [49][0][][] */ -25,27,14,-43,-16,21,127,112,-39,-10,13,36,-17,43,-20,32, 
  /* [50][0][][] */ 36,11,-83,-7,23,-61,-12,-13,-40,74,-65,-18,53,-87,-127,-90, 
  /* [51][0][][] */ -21,36,-5,120,-54,14,-59,-30,-12,-59,-3,-22,-25,21,4,127, 
  /* [52][0][][] */ -127,-4,2,-20,46,61,40,11,-2,-45,-37,-15,-68,-48,-92,-18, 
  /* [53][0][][] */ -111,-127,-7,-124,9,57,0,48,8,-35,-65,-12,-4,-13,57,111, 
  /* [54][0][][] */ -6,-45,14,-8,-13,60,61,-27,-14,-40,37,33,12,8,-127,51, 
  /* [55][0][][] */ -36,-50,-24,44,27,-35,46,61,-86,-59,-127,-34,42,-27,-21,24, 
  /* [56][0][][] */ 47,-52,-32,-32,-127,18,-62,-60,-21,-21,-21,14,79,-37,6,39, 
  /* [57][0][][] */ -61,26,54,-19,95,39,104,43,-23,70,21,-4,-19,110,-127,43, 
  /* [58][0][][] */ 101,-31,23,-46,83,-39,-118,-7,96,-127,-94,7,-98,-71,-59,53, 
  /* [59][0][][] */ -57,-7,-29,47,1,-7,-99,-74,87,127,-127,-2,-47,-26,-37,-8, 
  /* [60][0][][] */ 44,-20,-15,46,-127,-51,12,26,-28,23,-16,38,-18,-27,80,29, 
  /* [61][0][][] */ 24,45,-76,-2,-52,-27,-96,-63,-14,8,62,127,29,-27,80,95, 
  /* [62][0][][] */ 8,-8,32,12,7,39,5,127,-21,87,24,49,-13,-4,53,49, 
  /* [63][0][][] */ 50,-127,2,-1,-74,-21,29,7,-35,-16,-19,-37,-32,111,101,62, 
  /* [64][0][][] */ 36,13,-94,-70,-22,-8,53,-54,2,-101,18,-22,76,-45,-28,127, 
  /* [65][0][][] */ -52,-36,44,8,95,-30,81,63,-96,-43,-117,-45,10,127,-83,1, 
  /* [66][0][][] */ -59,-127,11,-66,-63,-100,71,11,-6,-73,5,46,-115,-54,-54,77, 
  /* [67][0][][] */ 18,-70,-36,-26,-44,127,-27,-114,-42,-29,-56,-84,-39,-48,-73,-12, 
  /* [68][0][][] */ 44,48,-14,-71,-53,55,-75,-18,-127,-37,-31,-57,33,-22,43,-84, 
  /* [69][0][][] */ 102,43,97,-36,3,-104,-64,40,16,127,-15,3,-57,65,52,-34, 
  /* [70][0][][] */ 5,-27,-26,50,-124,37,7,-127,69,43,36,44,8,-25,1,34, 
  /* [71][0][][] */ 111,-22,78,54,-50,-33,67,-78,127,-26,-48,-10,22,-93,0,-3, 
  /* [72][0][][] */ 42,-24,65,40,82,10,-127,62,50,2,10,-2,-41,-56,-53,37, 
  /* [73][0][][] */ 79,-7,58,-127,81,-42,-56,-16,-81,59,-59,-22,59,-51,19,-47, 
  /* [74][0][][] */ 64,-5,28,10,-127,-39,31,-3,-22,-42,36,-57,14,-103,-1,12, 
  /* [75][0][][] */ 77,127,-99,7,88,66,-41,-18,-17,-35,79,82,-116,27,34,46, 
  /* [76][0][][] */ -60,-50,13,-9,-51,-11,127,-20,-51,12,70,26,-61,-124,-36,88, 
  /* [77][0][][] */ -8,127,-31,-5,-29,-46,56,21,31,-80,16,89,7,60,19,101, 
  /* [78][0][][] */ 127,29,-23,62,-38,3,-118,-25,35,10,-65,-2,7,-96,4,35, 
  /* [79][0][][] */ -127,-78,93,92,-55,-58,-40,-43,-44,-16,51,40,-58,108,0,107, 
  /* [80][0][][] */ 40,71,24,-122,-44,13,127,-32,47,23,-15,45,110,-29,-23,33, 
  /* [81][0][][] */ 40,-105,52,-90,73,35,-29,127,127,36,-57,-56,-34,31,-103,-79, 
  /* [82][0][][] */ 23,6,30,8,127,-24,39,40,-19,81,-73,2,-37,-58,-19,-100, 
  /* [83][0][][] */ 20,59,10,32,72,55,127,65,4,13,-35,-65,-61,78,-33,-51, 
  /* [84][0][][] */ 32,-65,12,127,30,-85,-50,47,-28,8,-32,23,-89,56,2,-10, 
  /* [85][0][][] */ -108,50,-47,6,-26,-31,-13,-44,-68,1,-17,-82,-127,-66,-58,20, 
  /* [86][0][][] */ -1,64,94,127,24,-8,21,41,17,2,-31,-46,58,85,-52,-52, 
  /* [87][0][][] */ -22,47,125,-46,-127,-12,18,29,33,4,13,28,-14,28,3,14, 
  /* [88][0][][] */ -2,-33,-127,49,3,62,13,29,-25,-34,-86,-75,101,-16,-6,37, 
  /* [89][0][][] */ 54,47,5,-127,5,-60,-35,60,92,-17,40,-98,23,-10,40,-69, 
  /* [90][0][][] */ -20,83,0,2,-56,49,69,82,-8,-61,5,127,85,28,-24,99, 
  /* [91][0][][] */ -73,-24,-47,20,94,42,-2,-126,-24,6,13,-2,-51,-127,-82,18, 
  /* [92][0][][] */ -56,25,32,-11,-127,4,-77,50,-70,18,81,95,3,-5,44,-1, 
  /* [93][0][][] */ 53,35,91,43,-127,-97,14,47,-26,-42,-8,-22,16,-27,1,3, 
  /* [94][0][][] */ -30,-127,18,-78,25,17,-30,-3,70,-19,-13,57,5,42,-39,20, 
  /* [95][0][][] */ -5,-77,-3,-40,114,127,-64,23,48,31,-100,26,-28,99,-75,-36, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.001409175107255578, 0.0016762792365625501, 0.0024378143716603518, 0.0021244592498987913, 0.0018270268337801099, 0.0011417637579143047, 0.0016372498357668519, 0.0022054191213101149, 0.001711012446321547, 0.0013680341653525829, 0.0029338977765291929, 0.0020857460331171751, 0.0036948591005057096, 0.0015614264411851764, 0.0025176003109663725, 0.0027970541268587112, 0.0014810001011937857, 0.0021092270035296679, 0.0019753461237996817, 0.0016814658883959055, 0.0018524528713896871, 0.0012628493132069707, 0.0012269337894394994, 0.0022488047834485769, 0.0020727217197418213, 0.0018571107648313046, 0.001441058237105608, 0.0020343628711998463, 0.0021451977081596851, 0.0013784471666440368, 0.0020068120211362839, 0.0034075290895998478, 0.0012495529372245073, 0.001896698260679841, 0.0022010505199432373, 0.0012219259515404701, 0.0028644576668739319, 0.0020151946227997541, 0.0024908899795264006, 0.0018489976646378636, 0.0012936011189594865, 0.0044439700432121754, 0.0019023770000785589, 0.0019660401158034801, 0.0041642892174422741, 0.0017780626658350229, 0.0014787184773012996, 0.0020686278585344553, 0.0020243769977241755, 0.0021577863954007626, 0.0014720248291268945, 0.0026382741052657366, 0.002028952818363905, 0.0022037189919501543, 0.0029283636249601841, 0.0021112840622663498, 0.0017729639075696468, 0.001722918706946075, 0.0013064388185739517, 0.001955720130354166, 0.0022128990385681391, 0.0018813699716702104, 0.0028100707568228245, 0.001666162395849824, 0.0022816106211394072, 0.0011379331117495894, 0.0020366283133625984, 0.0014500009128823876, 0.0015867254696786404, 0.001933681545779109, 0.0013345605693757534, 0.001739631756208837, 0.0028285481967031956, 0.0012181145139038563, 0.0022740156855434179, 0.0015356612857431173, 0.0022013247944414616, 0.001735708792693913, 0.0021592120174318552, 0.0014274293789640069, 0.0023981691338121891, 0.0017966983141377568, 0.0012977073201909661, 0.0019644559361040592, 0.0031500398181378841, 0.0020936201326549053, 0.00263239536434412, 0.0028346327599138021, 0.0013552434975281358, 0.0023585825692862272, 0.0015900622820481658, 0.0019042942440137267, 0.0013587601715698838, 0.0020800377242267132, 0.0037567832041531801, 0.0019679849501699209, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data14[16] = { -43427, -14019, 4829, -26358, 2150, -4223, 19133, -17900, 10316, -8768, 10356, 6307, -3995, -37203, -8262, 13332, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 5.0274451496079564e-05, 5.339455310604535e-05, 5.0143771659350023e-05, 4.5892495109001175e-05, 7.8577540989499539e-05, 7.4277253588661551e-05, 5.8298643125453964e-05, 3.9184622437460348e-05, 8.0843172327149659e-05, 9.7907832241617143e-05, 7.5918498623650521e-05, 6.4331157773267478e-05, 8.0132223956752568e-05, 5.7835888583213091e-05, 6.2278471887111664e-05, 6.7222885263618082e-05, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ 35,44,25,49,-58,-84,-1,-1,-4,-72,43,32,80,-58,27,42,-65,-42,42,12,86,14,-81,-34,-47,89,119,48,21,90,32,-34,16,-18,3,34,14,66,-10,-7,125,14,9,-21,-11,1,27,-25,41,-33,111,-19,-74,3,44,12,46,1,-24,62,-42,48,-85,3,58,4,91,53,-2,-56,24,10,18,35,10,54,44,1,45,62,-12,31,78,66,-26,28,-28,56,42,-15,-120,8,22,-15,127,81, 
  /* [1][0][][] */ 35,47,-28,2,-36,-31,71,-43,-32,-29,-46,-16,15,-35,-4,-41,-4,-28,-25,0,-23,-65,99,-55,-29,15,11,32,-24,16,-49,23,-24,22,23,33,-37,63,-32,67,41,-17,4,-30,10,-26,13,49,-60,10,45,-85,-9,42,28,23,64,52,-80,42,-43,13,-15,-6,54,52,92,30,-46,-127,8,23,4,44,-6,44,-56,6,79,-10,30,-47,56,-30,-16,-54,-6,10,-1,-52,18,23,56,-65,-24,60, 
  /* [2][0][][] */ 2,-40,15,-7,38,50,-38,30,-53,36,11,-6,19,-13,17,19,16,-15,-127,-14,-9,-48,-47,13,6,-3,-42,11,-48,-26,2,71,-19,-23,7,1,-47,12,-10,-16,43,21,4,41,15,68,-10,-11,-71,-12,-17,18,-2,14,14,-62,37,8,47,10,-8,-17,1,28,19,-23,-21,-6,18,7,-22,-50,19,34,29,52,-56,-15,-20,-22,29,36,25,-19,1,-48,-16,-23,-18,-21,-1,32,-24,-11,76,-34, 
  /* [3][0][][] */ 31,-20,-15,-82,-47,-42,127,-6,49,102,-38,10,26,-2,-19,28,83,65,-11,44,-49,26,-3,-27,-43,86,62,1,-45,9,-56,70,35,11,26,-16,-5,-21,-25,44,24,36,-39,23,70,0,12,69,29,-18,45,-15,97,-6,31,-19,9,16,-5,-56,-33,45,72,-32,10,-3,113,-1,-33,-28,-38,13,-10,-55,18,-46,18,-61,120,-7,3,-37,-34,-2,1,-22,40,45,-51,22,-61,30,9,-65,-1,32, 
  /* [4][0][][] */ -3,83,63,22,-62,-10,-22,30,25,-44,33,8,30,52,-6,14,-3,-54,-40,-60,31,-36,-73,-13,-23,-15,-14,8,-51,127,-34,5,20,-35,-16,-23,69,71,-11,5,64,2,-19,-25,-31,41,67,14,11,-27,-54,26,-32,16,44,13,41,77,-26,40,-19,-84,-4,24,100,31,-38,-35,-5,-7,-9,-85,-20,37,48,63,-47,34,-64,41,19,36,-2,-39,59,-72,-32,-57,-12,-33,-55,32,-24,-5,51,-25, 
  /* [5][0][][] */ 7,-21,31,-32,-20,-28,-31,-13,26,21,-25,-11,-31,-39,13,-13,-18,7,-56,-69,-34,12,6,14,35,-60,87,-37,5,44,-3,62,-4,-109,1,1,-47,-27,-21,16,-50,-15,2,-11,-11,6,-96,7,-10,10,48,-33,0,-57,-9,1,-38,-75,21,-18,43,7,12,62,-55,-1,127,-42,9,-19,0,31,14,20,22,-3,2,-6,116,50,-54,-25,-23,2,33,55,15,107,12,-54,-1,20,-2,-27,-43,5, 
  /* [6][0][][] */ 1,-45,71,28,-19,93,-38,-74,-34,-79,-99,68,18,7,-11,57,-15,20,20,-52,-35,-14,-72,-16,12,-29,-4,76,-54,36,-4,-19,14,55,16,30,12,-45,30,-36,-52,40,50,-8,21,0,-57,-25,20,24,-40,-90,85,42,-18,-13,41,-19,-9,11,-27,-54,17,-6,14,-72,-48,-49,-127,14,15,-56,-41,-83,37,-68,44,-4,-39,13,-34,81,20,-102,55,-29,-23,7,-75,80,-79,58,38,-17,69,-52, 
  /* [7][0][][] */ -25,8,-36,84,-36,-9,31,6,-90,-16,86,85,14,-59,8,-47,-33,-27,-2,-20,-72,-19,-60,-35,42,62,-1,45,11,20,14,20,-41,-127,43,83,-13,18,-35,-5,7,13,20,-60,40,48,76,94,-31,45,-27,1,48,-14,54,-44,22,60,-121,22,27,15,-4,-49,88,-47,106,-9,-47,-59,76,1,-26,-23,-63,-11,4,-34,92,-42,7,-10,-61,-28,58,26,-85,36,-13,3,-13,84,57,5,106,-1, 
  /* [8][0][][] */ 16,-75,-18,9,-35,-7,22,-23,5,4,43,44,6,36,-60,-23,72,-5,37,16,-27,-63,-29,-24,-18,-24,96,1,-33,58,11,-34,7,15,-4,-11,-51,5,2,-6,10,58,27,-42,5,2,24,-8,28,-7,65,-2,-12,16,-51,-8,-18,124,-28,5,-8,-49,-36,-9,-66,-27,-16,42,-5,16,47,-20,-37,-127,28,-90,38,4,-66,24,-13,-6,23,86,52,-56,-58,45,-39,74,0,-23,-50,-5,-16,-91, 
  /* [9][0][][] */ -14,-15,-20,20,7,16,14,24,-20,18,91,68,-40,52,1,-23,4,25,-27,-13,-6,13,-14,-21,-38,16,22,4,3,13,15,13,-8,-20,-5,57,-9,22,28,12,-8,-38,14,-4,4,57,6,63,-21,4,-12,38,102,8,-32,-15,17,-5,19,7,-25,-1,69,10,22,30,35,6,36,-28,-31,-10,16,-127,-41,-110,-28,-18,22,-3,13,14,3,-26,45,8,-37,-8,6,115,40,37,14,27,-7,27, 
  /* [10][0][][] */ 18,40,18,12,-28,32,-60,-25,56,-6,-30,46,33,-1,-4,-62,-8,-22,21,-24,23,-18,1,-19,8,-7,-95,23,-2,52,-13,-15,20,0,-6,35,11,3,8,-9,33,2,82,-49,-61,-20,30,19,17,10,8,-34,-12,12,-8,24,14,26,-42,14,-29,-18,-18,9,-23,-15,-80,-19,-43,-28,60,-3,-15,44,45,43,39,-9,-80,12,-15,36,27,6,-23,10,-78,-127,-33,26,3,18,88,-38,28,23, 
  /* [11][0][][] */ 21,-26,3,4,-62,32,14,-6,75,-38,-11,-34,32,20,-18,1,-15,37,25,-57,0,8,4,-26,50,27,33,2,36,-38,-46,23,10,105,-77,35,33,-8,54,0,-75,58,-8,2,-37,-9,-16,8,37,-4,-42,-27,-35,35,-48,75,-23,13,-13,-22,5,36,-23,-52,-4,-26,-127,-58,15,-38,-73,29,47,35,-11,18,46,72,-96,-19,-6,2,3,13,-19,2,59,99,14,-72,27,9,-14,21,80,43, 
  /* [12][0][][] */ 4,43,-25,-29,33,-33,-21,35,46,-65,14,4,7,-12,7,9,7,-49,-25,0,11,46,41,87,-39,-38,-127,-6,114,-25,12,-13,-18,-97,85,7,47,-38,1,11,-2,-60,27,28,24,-34,36,-41,-82,4,-69,79,88,11,32,-83,18,23,-61,-14,0,62,79,25,-50,-20,29,22,94,27,47,55,10,-35,-15,-26,-41,-40,58,-86,-10,-50,47,-50,-10,19,12,-90,-8,53,-49,20,37,101,7,48, 
  /* [13][0][][] */ -35,31,-62,57,30,1,-15,20,8,51,-30,74,-35,-29,82,-58,5,35,49,-18,-35,-51,-2,39,27,65,-30,5,29,21,60,-21,-20,36,20,81,24,-47,-40,-73,-5,4,42,14,55,42,-8,37,-59,52,12,-13,0,-20,69,24,56,-15,-50,27,0,27,5,-44,0,74,127,57,15,-24,-28,-20,27,54,-57,71,-9,-71,126,-54,-2,-32,36,8,41,52,-48,-26,-42,-16,-15,82,29,31,86,75, 
  /* [14][0][][] */ -26,71,29,34,-58,-65,2,59,-62,-32,99,12,-70,-5,78,-17,-25,28,-63,14,-39,39,-89,26,-28,13,-70,-127,56,-5,23,88,-63,19,29,2,-31,-58,-4,-52,25,-36,57,-31,-10,32,-57,29,-9,-10,86,12,-4,54,-16,10,-36,46,-23,61,18,62,4,51,21,-25,-5,-50,34,33,78,64,-41,62,18,29,14,2,47,6,-66,104,15,-109,80,3,4,9,-93,-37,-32,12,-7,25,43,54, 
  /* [15][0][][] */ 37,-25,27,30,66,7,-21,-3,-4,-3,-66,-30,66,40,16,-15,-17,3,-51,22,-1,-29,12,55,57,-16,46,25,62,-33,-18,37,28,18,22,-73,56,20,49,18,54,43,-6,5,-24,-127,32,-49,-36,5,-13,-22,9,-10,-7,52,-20,-11,-25,11,-5,-60,-25,12,5,22,-60,27,-31,-15,5,5,0,-98,-31,-99,-44,4,-92,-5,30,-22,31,-1,-46,-11,-14,-13,19,80,11,-52,-18,-1,42,-14, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.0023060804232954979, 0.0024491988588124514, 0.002300086198374629, 0.0021050807554274797, 0.0036043382715433836, 0.0034070846159011126, 0.0026741486508399248, 0.0017973918002098799, 0.0037082622293382883, 0.004491015337407589, 0.0034823683090507984, 0.00295085902325809, 0.0036756512708961964, 0.0026529221795499325, 0.0028567027766257524, 0.0030835021752864122, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data16[96] = { 14635, -1155, -9269, 5264, -12131, 4150, -2582, 1712, 5318, -8198, 4690, -8346, 9126, -3550, -3191, -8755, -130, 4372, -7589, -6117, -2660, 3426, -5005, -3079, -19, 20787, -12029, -5822, -5125, -2355, 2754, -2129, 10830, -1605, -3329, -1683, 1225, 14408, 1663, 13014, 2014, 4248, -543, 12087, -2467, -1176, 14754, 10292, -6630, -518, -3480, 2562, 2978, -9029, 1126, 4968, -1157, 6537, -667, 6175, -4253, 925, 2172, 14829, 12579, -2490, 11656, 6470, -3133, -3351, 7861, -1662, 713, 2160, -3417, -1892, 20946, 13746, 15806, 14399, 8780, -1721, 4467, 6326, -3845, -5071, 12930, -9349, 17422, 774, -7983, 4893, -165, 2035, 24370, -2658, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 6.0791538999183103e-05, 0.00019447386148385704, 8.3661267126444727e-05, 0.00016871388652361929, 0.00012970752140972763, 0.0004227433237247169, 0.00010183784615946934, 0.00012562806659843773, 0.00018966580682899803, 0.00012781066470779479, 0.00023243861505761743, 0.00010842606570804492, 0.00012232569861225784, 0.00013813616533298045, 0.00017444492550566792, 0.0001149390809587203, 0.00021371949696913362, 0.00023874510952737182, 0.00011768119293265045, 0.00020034454064443707, 0.00017401504737790674, 0.00014284139615483582, 0.00012752349721267819, 0.00016796578711364418, 0.0018107156502082944, 7.343720062635839e-05, 0.00019407884974498302, 0.00011382095544831827, 0.00019898636674042791, 0.00016021777992136776, 8.154330134857446e-05, 0.00016581053205300122, 6.1762737459503114e-05, 0.00030200131004676223, 0.00011832662130473182, 0.00014587368059437722, 0.00027287195553071797, 5.7039920648094267e-05, 0.0001446087408112362, 8.7851360149215907e-05, 0.0003326542500872165, 0.00019802169117610902, 0.0001870763226179406, 6.8102504883427173e-05, 0.00012843057629652321, 0.00017208256758749485, 9.2835762188769877e-05, 0.00014936816296540201, 0.00010276858665747568, 0.00038358173333108425, 0.00021615756850223988, 9.949898230843246e-05, 0.00011161915608681738, 0.00010930278949672356, 0.00014503592683468014, 0.00015089272346813232, 7.0103407779242843e-05, 0.00027089889044873416, 0.0002958188415504992, 0.00017090931942220777, 0.00015116696886252612, 0.00020580081036314368, 0.00011085595906479284, 7.878892938606441e-05, 0.00017219329311046749, 0.00027868623146787286, 0.00012645116657949984, 0.00014646901399828494, 0.00017876525816973299, 0.00020045165729243308, 0.00012252289161551744, 0.00016142590902745724, 0.00041421692003495991, 0.00016425830835942179, 0.00012845825403928757, 0.00017241177556570619, 5.7817091146716848e-05, 8.251403778558597e-05, 0.00012654199963435531, 0.00013061449863016605, 6.9106805312912911e-05, 0.00018342841940466315, 0.0001152578042820096, 0.00020764407236129045, 6.7059205321129411e-05, 0.00015475432155653834, 0.00015223675291053951, 0.00019197510846424848, 7.8694829426240176e-05, 0.00025817207642830908, 0.00010979179933201522, 0.0001329334918409586, 0.00017117963579948992, 0.00015489237557630986, 8.4315062849782407e-05, 0.00022530353453475982, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -39,-14,84,6,127,-12,56,-43,-15,17,-37,13,-18,-4,-7,-24,-16,-11,-24,6,0,3,-7,54,3,-60,-49,-16,46,5,4,28,-4,2,21,-48,-3,-53,13,-20,-23,13,46,-55,-14,49,-117,-54,-32,18,-11,39,-40,-16,5,-31,24,-43,9,-51,7,-18,7,-100,-45,-4,-50,-12,10,52,4,11,40,-8,-7,3,-4,53,127,-1,-72,-4,-94,-19,3,-26,50,4,-91,6,4,-79,-10,45,14,7, -81,75,127,-76,-8,-12,84,-85,-18,18,-56,22,-55,10,-69,45,-17,47,31,-18,-31,127,40,127,42,36,18,56,127,31,117,-2,-127,-28,-25,-50,-17,-89,127,-70,-60,-40,0,-107,59,-13,-78,-23,38,0,30,106,-55,35,-117,-21,-82,-21,-6,26,-5,-127,-79,-127,-44,17,-6,-127,8,15,-53,118,-127,-12,36,-30,-69,-18,-16,-69,-127,10,-23,-80,127,59,-9,41,-104,1,4,-31,12,127,-4,-62, -64,17,38,54,119,-17,64,-49,-32,-8,-29,44,-11,-7,-6,-18,-18,-18,-36,-14,-32,5,11,52,19,-74,-24,-24,46,-5,-26,-2,35,-4,8,39,5,-127,-8,-17,-25,-35,31,-33,-5,-44,-127,-21,-27,8,-21,25,21,-11,-3,-27,114,-31,-1,-32,7,-5,-36,-36,-35,-15,127,-24,-10,35,31,41,-32,-16,-11,42,-33,99,-64,-24,-75,9,-127,-38,47,-20,-37,-2,-92,-12,-15,46,-27,15,16,2, 
  /* [0][1][][] */ -107,-41,88,-118,118,60,-39,-21,-6,5,-36,11,-127,0,16,64,-5,23,39,40,74,-33,41,-23,43,9,81,37,26,-30,-18,-17,-116,-6,77,-33,-21,-88,-52,-127,-28,7,82,-15,-46,127,-119,-127,27,55,7,-59,-127,96,62,-31,70,-75,45,-55,42,-26,84,-28,-77,17,-26,-51,2,13,-127,-5,35,127,-21,-67,-88,-126,-98,-78,-60,-2,-16,14,30,30,-62,65,-127,127,117,-118,127,-9,-127,3, 24,127,90,127,-93,-127,127,-62,127,127,-67,-45,-50,127,-12,127,127,-127,127,127,127,-96,17,-101,-127,-127,127,127,-85,127,-54,127,-87,127,90,-90,127,84,-11,41,127,18,-127,-95,127,-16,110,121,127,-127,127,-127,64,127,-124,127,-108,127,-127,127,-84,69,72,-63,127,127,-15,109,-83,-127,-3,-127,-15,108,127,33,-85,-127,95,-127,23,127,105,127,107,104,-82,127,-89,38,-23,-33,-67,-25,-79,-18, -127,-44,-12,-58,77,17,-34,-2,-46,-4,-13,127,-82,3,23,73,-18,26,51,24,-20,-29,54,19,32,-16,72,9,11,-9,13,-3,-49,-11,74,127,-9,-94,-52,-71,-49,5,12,-24,-24,-79,-71,-125,8,73,-30,-46,108,37,127,-77,109,-57,53,-73,-5,-44,-127,-72,-57,-20,-42,-25,-32,21,-23,9,22,-124,-27,127,-127,-110,-94,-40,-91,-20,-37,-30,24,48,-127,54,-71,-51,127,127,-75,-24,-74,8, 
  /* [0][2][][] */ -36,-59,-50,-22,65,13,-3,20,-20,47,24,19,33,5,7,-57,-1,-26,-68,7,4,-22,65,-7,-10,-65,-38,7,1,-22,-51,6,105,6,-18,-7,-13,-65,-10,-58,-17,-18,17,20,19,18,-30,-71,-16,-10,-31,-25,-53,-44,-3,-37,35,-35,20,-48,11,31,-5,-39,-79,-13,88,22,25,47,-48,-18,-19,-21,5,-26,5,-6,-64,-15,78,-3,-53,-4,-6,5,7,-32,-15,7,7,-64,-20,-10,-90,7, -82,-39,-11,-54,-48,8,62,127,-74,105,127,-9,-35,8,127,27,-23,-32,31,-28,-38,-59,127,19,8,-59,35,4,-15,23,-127,-70,17,-19,-127,50,-94,-105,14,-74,-20,-127,-40,127,26,2,-58,0,40,10,16,-22,34,21,-69,-65,-60,8,54,-81,127,52,36,-47,-79,-63,4,-39,127,51,-76,-6,-1,-30,34,-6,12,-79,-26,17,-26,-14,-37,-89,53,-127,-41,-6,-81,-22,0,-12,23,-94,-82,127, -17,-2,-56,92,75,8,-4,8,-34,8,11,81,85,3,-10,-19,-2,-8,-28,-5,-55,-26,45,16,-15,-58,28,-11,-14,-24,-47,-8,91,13,-39,47,-21,-62,-44,-49,-34,27,-13,28,21,-18,-29,-12,-47,16,-18,-4,9,-9,29,-21,127,9,24,-34,-1,28,-47,-36,8,-39,-1,47,22,38,-17,-20,-74,-52,-37,24,-18,-27,83,-23,50,1,-15,3,-5,26,-17,-5,31,-11,13,5,-20,-11,-34,-6, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.0033565820194780827, 0.010737801901996136, 0.0046193255111575127, 0.0093154739588499069, 0.0071617523208260536, 0.023341614753007889, 0.0056229387409985065, 0.0069365068338811398, 0.010472326539456844, 0.0070570181123912334, 0.012834011577069759, 0.0059867044910788536, 0.006754167377948761, 0.0076271370053291321, 0.0096319112926721573, 0.0063463184051215649, 0.011800441890954971, 0.013182221911847591, 0.0064977230504155159, 0.011061948724091053, 0.0096081756055355072, 0.0078869340941309929, 0.0070411618798971176, 0.0092741679400205612, 0.099977985024452209, 0.0040548075921833515, 0.010715991258621216, 0.0062845814973115921, 0.01098695769906044, 0.0088463649153709412, 0.0045023830607533455, 0.0091551663354039192, 0.0034102064091712236, 0.016674889251589775, 0.0065333601087331772, 0.0080543607473373413, 0.015066523104906082, 0.0031494379509240389, 0.0079845171421766281, 0.0048506800085306168, 0.018367379903793335, 0.010933693498373032, 0.010329348966479301, 0.003760254243388772, 0.0070912460796535015, 0.0095014749094843864, 0.0051258918829262257, 0.0082473075017333031, 0.0056743291206657887, 0.021179322153329849, 0.011935058981180191, 0.0054937992244958878, 0.0061630099080502987, 0.0060351127758622169, 0.0080081047490239143, 0.0083314850926399231, 0.0038707333151251078, 0.014957581646740437, 0.016333526000380516, 0.009436693973839283, 0.0083466274663805962, 0.011363214813172817, 0.0061208703555166721, 0.004350301343947649, 0.0095075881108641624, 0.015387555584311485, 0.0069819539785385132, 0.0080872317776083946, 0.0098704565316438675, 0.011067863553762436, 0.0067650554701685905, 0.0089130708947777748, 0.022870833054184914, 0.0090694613754749298, 0.0070927743799984455, 0.0095196515321731567, 0.0031923491042107344, 0.0045559816062450409, 0.0069869691506028175, 0.0072118309326469898, 0.0038157063536345959, 0.010127931833267212, 0.0063639166764914989, 0.011464989744126797, 0.0037026489153504372, 0.0085447020828723907, 0.0084056956693530083, 0.010599833913147449, 0.0043451054953038692, 0.014254874549806118, 0.0060621132142841816, 0.0073398733511567116, 0.0094516193494200706, 0.0085523249581456184, 0.0046554245054721832, 0.012440050020813942, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data18[96] = { 1193, 14390, 1229, 3684, 10049, 19511, 47, 3926, 16085, -1439, 32998, 6278, 3899, 149, 4195, 1140, 4993, 6329, -282, 21196, 2365, 10079, -2720, 1554, -15538, 4595, 4490, 2657, 7661, 1504, 5362, 4068, 1929, 20533, 8525, 19726, 7449, 6675, 2883, 4664, 23802, 2653, 784, 2361, 5482, 11028, 10659, 14128, 1462, -2983, 2849, 8885, 3108, -3533, 14294, 222, 5420, 29176, 2891, 4084, 5205, 11407, 4853, -232, 29358, 11112, 4984, 4985, 5365, 6247, 4179, 1322, -6998, 6331, 4034, 7188, -118, 15361, 4999, 10884, 5126, 1545, 3439, 17528, 681, 15298, 14091, 4926, -548, 3755, 3737, 21760, 6921, 1834, 11116, 7535, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.00015433593944180757, 6.0875689086969942e-05, 0.00014045285934116691, 0.00010806365025928244, 7.9783792898524553e-05, 4.8226054786937311e-05, 0.00013320201833266765, 0.00011746163363568485, 5.2145525842206553e-05, 0.00012687139678746462, 2.9125729270162992e-05, 7.5313560955692083e-05, 0.00010026657400885597, 0.00027770921587944031, 0.00010512711742194369, 7.948857091832906e-05, 0.00012559538299683481, 0.00010592670878395438, 0.000135942900669761, 3.8372309063561261e-05, 0.00011525306035764515, 7.8270873927976936e-05, 0.00010105538240168244, 0.00013602069520857185, 5.2337476518005133e-05, 6.0510614275699481e-05, 0.00013221809058450162, 0.00012715428601950407, 0.00010054574522655457, 0.00015817726671230048, 9.3238581030163914e-05, 0.00012788987078238279, 0.00015524744230788201, 4.0591829019831493e-05, 7.8711018431931734e-05, 4.258581975591369e-05, 8.4654064266942441e-05, 6.5323431044816971e-05, 0.00012756344221998006, 9.3601753178518265e-05, 3.7246070860419422e-05, 0.00012130158575018868, 0.00020307849626988173, 8.0903686466626823e-05, 7.6367861765902489e-05, 6.8588888098020107e-05, 6.9136272941250354e-05, 7.3666684329509735e-05, 0.00015269195137079805, 0.0001264676102437079, 0.00015840998094063252, 7.6758005889132619e-05, 0.00013925175881013274, 8.6306477896869183e-05, 5.2602863434003666e-05, 0.00016328849596902728, 7.187409937614575e-05, 3.4397675335640088e-05, 6.3479033997282386e-05, 7.8904027759563178e-05, 8.9654189650900662e-05, 7.2052018367685378e-05, 0.00011804842506535351, 9.3100068625062704e-05, 3.3331001759506762e-05, 7.4881420005112886e-05, 9.4415510830003768e-05, 0.0001084192845155485, 0.0001274073583772406, 7.3653929575812072e-05, 0.0001192515846923925, 9.7942960564978421e-05, 0.00010048535477835685, 9.4969109341036528e-05, 0.0001016825990518555, 9.6187279268633574e-05, 0.00016727737965993583, 4.5632623368874192e-05, 0.00011316615564282984, 7.3735805926844478e-05, 6.2003702623769641e-05, 0.0001462916552554816, 0.00010463503713253886, 5.0935075705638155e-05, 0.00012012596562271938, 4.5192024117568508e-05, 5.5770138715161011e-05, 0.00011066375736845657, 0.00012922858877573162, 0.00013660785043612123, 8.7436936155427247e-05, 4.5178465370554477e-05, 8.4475410403683782e-05, 0.00011401988740544766, 6.0727899835910648e-05, 9.3845505034551024e-05, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 49,29,26,51,-73,-68,59,67,83,127,-46,73,3,-8,51,51, 
  /* [1][0][][] */ -19,16,-53,-28,127,94,-27,11,-7,36,-59,29,-59,35,-79,-43, 
  /* [2][0][][] */ -18,37,72,1,58,58,-4,21,44,12,20,-32,29,-127,-9,-7, 
  /* [3][0][][] */ 127,-11,58,21,25,24,-55,9,42,69,-67,-14,-45,12,14,26, 
  /* [4][0][][] */ -7,-27,40,48,-127,-13,-82,-85,0,0,-43,-18,33,25,-14,91, 
  /* [5][0][][] */ -107,22,62,13,63,18,-13,-22,-21,1,-54,-39,-66,93,-127,-39, 
  /* [6][0][][] */ -127,17,-27,33,7,-84,105,10,25,-14,-66,41,31,33,-71,7, 
  /* [7][0][][] */ 3,76,32,-127,75,39,117,-18,20,-11,-18,11,20,9,-22,-31, 
  /* [8][0][][] */ -25,-12,-59,51,-37,104,-10,-101,49,-31,96,35,111,60,-127,1, 
  /* [9][0][][] */ -9,-127,-52,115,-75,-85,-11,34,89,6,15,22,-99,14,28,-26, 
  /* [10][0][][] */ -73,-55,-127,33,-84,94,41,-43,-18,-84,33,-49,0,77,-78,65, 
  /* [11][0][][] */ -60,-46,-119,51,36,60,41,76,31,43,55,-44,-57,109,-127,15, 
  /* [12][0][][] */ -63,-79,-58,72,-61,-110,41,127,6,81,-47,79,-39,-22,-46,0, 
  /* [13][0][][] */ -59,-9,-55,12,-24,19,47,20,-36,127,3,-19,48,40,-4,6, 
  /* [14][0][][] */ -46,-65,-37,-9,30,61,6,-95,127,-37,22,-46,75,-71,-91,-95, 
  /* [15][0][][] */ -2,-127,99,-48,-74,-44,-5,79,19,-59,-67,-20,115,-55,-3,-36, 
  /* [16][0][][] */ -20,1,6,-28,2,45,18,-29,30,-127,51,-24,0,-4,-41,-52, 
  /* [17][0][][] */ -11,-10,14,-35,-17,26,-42,12,127,-73,-4,54,84,-66,-9,-117, 
  /* [18][0][][] */ 95,5,-24,-104,5,-50,118,-28,64,58,2,85,36,127,50,-92, 
  /* [19][0][][] */ 7,18,-60,-83,-127,85,81,-24,22,-83,52,-103,-52,14,15,5, 
  /* [20][0][][] */ 26,35,106,-127,122,-20,-84,117,-92,-74,-23,-106,-39,77,-42,-53, 
  /* [21][0][][] */ -25,-51,-127,-13,77,45,84,59,-46,-57,-11,-66,67,-104,-32,-3, 
  /* [22][0][][] */ 55,7,111,-17,-16,44,76,-6,57,127,46,48,21,-5,115,-31, 
  /* [23][0][][] */ -127,-94,14,76,62,36,-16,-2,10,20,-28,-110,-2,65,90,96, 
  /* [24][0][][] */ -13,-59,13,4,40,-25,56,-74,31,68,-127,25,2,-95,30,-31, 
  /* [25][0][][] */ 127,-79,118,99,88,-25,-31,-61,-80,97,9,-84,9,-13,43,-51, 
  /* [26][0][][] */ -12,9,21,51,-59,103,-18,32,-52,-38,-85,21,-9,9,46,-127, 
  /* [27][0][][] */ 28,6,-25,-64,-61,24,-59,-8,-97,-45,-46,-29,-57,35,-20,127, 
  /* [28][0][][] */ -63,5,47,3,3,-12,-127,10,14,-29,6,-8,27,-58,-74,-35, 
  /* [29][0][][] */ -19,-100,-5,60,-35,38,127,-20,81,52,-107,50,45,-37,-71,77, 
  /* [30][0][][] */ 14,-71,-70,24,-127,-15,24,7,-1,-32,0,-20,-24,50,-20,92, 
  /* [31][0][][] */ -98,-19,-6,127,-21,-7,-32,-32,-41,-67,7,-57,-2,-78,-21,73, 
  /* [32][0][][] */ -127,-69,-46,-3,-65,-72,-27,17,50,65,-48,-30,49,39,7,-15, 
  /* [33][0][][] */ -4,33,-110,19,-119,-69,84,-39,-115,23,-8,-44,7,120,127,101, 
  /* [34][0][][] */ 37,49,32,59,-76,-52,13,27,23,-127,-21,4,-55,-18,12,67, 
  /* [35][0][][] */ 34,54,-101,-8,-127,37,77,25,34,58,25,-14,-29,100,34,72, 
  /* [36][0][][] */ -21,10,-64,24,127,9,9,39,-56,41,-69,-48,28,-39,-50,8, 
  /* [37][0][][] */ -99,9,36,-57,60,-122,-57,-19,-10,-4,-57,1,32,-103,-17,-127, 
  /* [38][0][][] */ -2,77,-30,-70,-46,-28,-125,-22,-33,-15,68,60,-92,-127,84,-49, 
  /* [39][0][][] */ 13,-62,-1,95,-14,21,40,-8,3,17,49,14,-21,119,67,127, 
  /* [40][0][][] */ 112,78,127,89,-102,-105,-7,39,-117,41,-104,-69,-17,-80,117,-24, 
  /* [41][0][][] */ 3,-29,23,60,-54,127,15,33,-13,30,-115,21,37,7,38,-120, 
  /* [42][0][][] */ 9,-104,-11,32,127,23,68,28,-15,-64,-73,-3,-11,-13,19,24, 
  /* [43][0][][] */ -61,-68,-29,-20,98,38,0,57,-75,-55,-127,-38,112,3,-112,9, 
  /* [44][0][][] */ -17,-15,-50,-80,3,69,91,8,0,-127,-19,86,-20,47,17,100, 
  /* [45][0][][] */ 22,-96,-49,-28,-127,32,-31,-91,24,-70,9,-76,25,-12,-28,77, 
  /* [46][0][][] */ 38,-51,8,-3,57,-75,-29,77,-10,-17,7,19,-76,-91,55,-127, 
  /* [47][0][][] */ -45,-25,14,20,43,26,11,-10,5,127,6,74,7,31,10,16, 
  /* [48][0][][] */ 37,3,-75,-77,31,-59,29,55,43,-63,2,43,-69,25,-34,-127, 
  /* [49][0][][] */ 88,3,-18,65,21,-19,26,79,-29,127,-29,41,-49,-36,27,51, 
  /* [50][0][][] */ 8,-13,28,-16,-127,-5,-9,-52,63,19,2,51,-30,-74,-13,-21, 
  /* [51][0][][] */ 45,3,-7,-108,-37,127,84,-60,7,-6,56,-61,54,47,-20,-14, 
  /* [52][0][][] */ 8,10,-4,-77,96,-125,-3,-40,56,19,127,-44,0,-15,-19,77, 
  /* [53][0][][] */ -67,-83,40,-46,-11,-127,9,-80,-22,98,-90,73,-5,5,10,-52, 
  /* [54][0][][] */ 9,92,-17,6,-127,-48,-54,-26,-28,12,82,75,-117,4,103,39, 
  /* [55][0][][] */ 39,-16,-19,68,-13,12,5,-4,28,127,15,65,-13,-4,2,26, 
  /* [56][0][][] */ -18,-20,-127,104,-6,23,25,98,96,51,111,34,-65,2,-21,101, 
  /* [57][0][][] */ 36,20,90,-107,48,21,-5,-38,75,-52,15,98,107,-56,127,-35, 
  /* [58][0][][] */ 88,-45,59,-81,62,-8,-85,104,56,127,-48,80,2,-24,77,-27, 
  /* [59][0][][] */ -61,43,85,-110,-2,-103,-26,16,28,15,-121,-99,-127,-71,89,23, 
  /* [60][0][][] */ 38,-40,21,-20,15,-15,22,-76,68,127,-34,56,-9,-32,-6,-19, 
  /* [61][0][][] */ 71,31,49,-15,-81,-127,-30,-58,-35,10,-23,18,-48,-29,93,50, 
  /* [62][0][][] */ 10,67,-48,43,-39,127,-30,5,-45,8,-48,17,-25,41,31,-82, 
  /* [63][0][][] */ -1,-35,-84,-126,-52,-33,109,-18,-26,-127,-18,31,-28,97,42,-19, 
  /* [64][0][][] */ -29,22,60,-13,72,-119,-4,79,-109,16,-88,-56,-33,36,127,43, 
  /* [65][0][][] */ -44,-17,-10,-8,66,29,-66,-48,-101,-36,0,-30,-127,65,-97,40, 
  /* [66][0][][] */ -34,89,11,31,-31,127,-31,58,-56,25,4,45,-49,71,74,-60, 
  /* [67][0][][] */ 7,-40,-23,-4,45,-80,31,-67,19,52,-27,67,-110,-43,-24,-127, 
  /* [68][0][][] */ -1,-127,-26,76,-20,1,29,72,-4,18,30,-2,-53,39,15,36, 
  /* [69][0][][] */ 17,23,127,-91,14,-49,-40,42,31,76,32,81,81,-65,55,-81, 
  /* [70][0][][] */ 47,57,41,-49,73,43,-81,-67,-112,-127,21,47,-11,79,-124,16, 
  /* [71][0][][] */ -2,-127,9,-30,53,-1,-8,71,-91,90,-101,-66,-6,26,-40,43, 
  /* [72][0][][] */ -28,-14,39,-1,-24,-29,-97,-73,-17,102,-39,79,54,123,-127,2, 
  /* [73][0][][] */ 20,-32,12,-56,71,-127,24,-58,119,117,85,-6,40,-15,-89,111, 
  /* [74][0][][] */ -13,-18,-11,106,-100,-26,81,55,68,78,27,127,110,46,-62,-3, 
  /* [75][0][][] */ -30,58,-22,20,-41,127,-19,43,6,32,-12,40,-27,47,37,-47, 
  /* [76][0][][] */ -52,88,-46,93,-109,-45,-16,46,56,46,-32,-50,13,-33,-127,35, 
  /* [77][0][][] */ 90,127,-96,97,43,93,99,26,38,7,122,-4,85,65,36,47, 
  /* [78][0][][] */ 46,-44,20,-58,35,-105,11,-64,67,46,102,-31,13,-38,-46,127, 
  /* [79][0][][] */ -44,59,-9,16,-13,-39,-8,0,-127,-39,62,18,109,62,-46,-14, 
  /* [80][0][][] */ -67,0,124,30,127,22,-46,-91,-44,117,-112,-52,-57,-77,26,16, 
  /* [81][0][][] */ 55,38,3,6,18,-28,55,127,-93,108,-31,-19,-24,19,84,112, 
  /* [82][0][][] */ 74,115,-32,-28,-47,-9,118,-127,95,-16,-45,62,83,5,74,-36, 
  /* [83][0][][] */ 6,-38,16,-10,39,35,-8,-109,41,-14,73,20,31,-70,-60,-127, 
  /* [84][0][][] */ -127,-60,-21,17,1,87,62,12,52,54,81,106,48,94,-74,-14, 
  /* [85][0][][] */ 107,18,109,-80,94,-4,-42,21,30,127,-91,-8,-35,-8,101,-42, 
  /* [86][0][][] */ -46,98,-12,-24,21,123,37,0,93,53,127,-16,-26,66,-38,-36, 
  /* [87][0][][] */ 9,-60,28,-31,45,-127,17,-19,45,-4,51,-40,31,-35,-38,57, 
  /* [88][0][][] */ -109,61,41,2,94,-36,39,46,-55,-74,127,-72,103,114,115,-120, 
  /* [89][0][][] */ -8,44,-22,26,-38,127,0,10,-31,-4,-20,0,1,49,20,-50, 
  /* [90][0][][] */ 82,-112,38,68,106,-30,11,39,-4,-112,-127,-31,-4,-34,-12,13, 
  /* [91][0][][] */ -14,32,-10,-25,-23,-76,-67,72,-51,-5,-100,-67,-127,-64,-51,-33, 
  /* [92][0][][] */ 81,3,46,32,-88,-112,-7,-10,-10,39,-74,-45,-4,-127,-20,-25, 
  /* [93][0][][] */ -34,-103,-80,53,-28,-87,-48,127,104,78,11,46,-71,58,6,-36, 
  /* [94][0][][] */ 91,-6,127,3,24,-41,-3,6,-6,98,-20,74,13,3,101,-41, 
  /* [95][0][][] */ -47,-23,-35,-33,127,41,67,37,2,4,-85,-56,3,24,-24,36, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.0042033083736896515, 0.0016579373041167855, 0.0038252056110650301, 0.0029430920258164406, 0.0021728957071900368, 0.001313426997512579, 0.0036277305334806442, 0.0031990441493690014, 0.0014201729791238904, 0.0034553171135485172, 0.00079323345562443137, 0.0020511497277766466, 0.0027307402342557907, 0.0075633549131453037, 0.0028631160967051983, 0.0021648553665727377, 0.0034205650445073843, 0.0028848927468061447, 0.0037023779004812241, 0.0010450622066855431, 0.0031388942152261734, 0.0021316916681826115, 0.0027522232849150896, 0.0037044966593384743, 0.0014254007255658507, 0.0016479945043101907, 0.0036009333562105894, 0.0034630217123776674, 0.0027383433189243078, 0.0043079261668026447, 0.0025393341202288866, 0.0034830551594495773, 0.0042281332425773144, 0.0011055103968828917, 0.0021436789538711309, 0.0011598162818700075, 0.0023055365309119225, 0.0017790707061067224, 0.003474164754152298, 0.0025492249988019466, 0.0010143893305212259, 0.0033036244567483664, 0.0055308025330305099, 0.0022033958230167627, 0.0020798635669052601, 0.0018680046778172255, 0.0018829127075150609, 0.0020062974654138088, 0.0041585350409150124, 0.0034443202894181013, 0.0043142642825841904, 0.0020904890261590481, 0.0037924940697848797, 0.002350539667531848, 0.0014326284872367978, 0.0044471295550465584, 0.0019574768375605345, 0.00093681382713839412, 0.0017288387753069401, 0.0021489355713129044, 0.0024417140521109104, 0.0019623222760856152, 0.0032150254119187593, 0.0025355617981404066, 0.00090776319848373532, 0.0020393806044012308, 0.0025713876821100712, 0.0029527775477617979, 0.0034699141979217529, 0.0020059500820934772, 0.0032477930653840303, 0.0026674570981413126, 0.0027366986032575369, 0.0025864648632705212, 0.0027693053707480431, 0.0026196413673460484, 0.0045557660050690174, 0.0012427953770384192, 0.0030820576939731836, 0.0020081799011677504, 0.0016886584926396608, 0.0039842240512371063, 0.0028497143648564816, 0.0013872066047042608, 0.0032716067507863045, 0.0012307957513257861, 0.0015188886318355799, 0.0030139053706079721, 0.0035195148084312677, 0.0037204877007752657, 0.0023813275620341301, 0.0012304264819249511, 0.0023006710689514875, 0.00310530886054039, 0.0016539122443646193, 0.0025558636989444494, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data20[16] = { -8646, 5044, -13910, -3969, 18829, -16806, -36692, -10090, -5271, 8503, -18854, -18288, 10082, -15629, -2483, -473, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 9.4369526777882129e-05, 9.5693394541740417e-05, 0.00010206938168266788, 0.00013471883721649647, 6.6949258325621486e-05, 0.0001443324435967952, 8.1479549407958984e-05, 0.00012071518722223118, 8.7590196926612407e-05, 7.168987940531224e-05, 0.0001085899566533044, 0.0001275385293411091, 9.9698183475993574e-05, 6.5754233219195157e-05, 0.00010925598326139152, 0.00010576245404081419, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ 40,58,11,-37,74,60,-66,75,-37,127,-19,60,-16,30,-22,57,39,74,43,-55,-94,103,5,66,96,40,50,38,-44,-52,3,84,-4,-2,-67,75,87,-126,-52,38,27,-19,52,4,-32,-72,-48,5, 
  /* [1][0][][] */ -57,8,-68,-52,18,74,-51,19,-20,-26,-31,38,58,-9,-30,-29,-20,-23,-19,30,-54,24,-94,-46,-57,-28,48,65,-29,-20,53,-50,8,-43,-35,69,16,-41,127,-27,-28,45,-30,-13,49,50,46,25, 
  /* [2][0][][] */ 19,-6,66,-14,-26,-95,15,18,109,67,-74,-4,104,-55,127,100,-69,-29,-30,31,70,-74,-36,-82,35,-52,42,-73,51,28,-54,12,38,-39,76,26,-61,-7,-20,-42,21,18,48,-35,-2,-95,77,-58, 
  /* [3][0][][] */ 33,16,-30,-12,25,100,26,-21,25,-41,32,-8,-38,2,3,27,-34,-50,41,-125,5,-24,-31,-5,-49,103,127,68,-26,-24,36,49,45,-11,106,48,-17,-44,12,33,9,41,-22,8,40,30,7,-14, 
  /* [4][0][][] */ 110,-23,16,-60,113,112,57,-6,67,-48,-124,4,47,-26,43,-20,-120,-127,-10,-107,-34,25,-56,-44,-70,105,-121,119,-53,-50,33,49,36,-65,5,-57,-20,34,-37,38,-34,-3,-26,80,-27,109,-41,-64, 
  /* [5][0][][] */ 6,-3,-48,-14,-18,47,22,-48,87,68,28,95,30,2,44,-1,-55,127,-34,50,8,-4,-76,-14,28,13,-58,-40,-29,38,29,-30,-42,-1,22,32,-47,-3,-98,8,98,-34,22,44,-19,-1,-27,36, 
  /* [6][0][][] */ 46,22,9,45,26,-6,96,-39,-12,45,127,93,40,37,-61,38,31,-24,-48,79,43,-54,-41,28,-95,80,81,16,117,52,-4,8,86,-37,-116,-3,64,42,14,-9,8,61,76,-8,49,114,35,-5, 
  /* [7][0][][] */ -99,6,-30,30,-50,-45,4,56,70,97,-48,-65,-87,9,-18,-24,-70,103,10,107,-41,28,35,42,-27,-86,-38,-71,36,47,4,11,-29,20,24,-15,-19,-48,127,15,-13,48,28,0,62,75,-18,-4, 
  /* [8][0][][] */ 14,-64,36,-62,69,-50,48,-28,-28,-103,11,6,-22,-23,32,40,-4,-10,-43,95,11,46,-7,46,80,-24,-43,-51,-127,-30,-65,-109,34,-81,9,81,43,20,78,6,19,9,64,99,8,-67,-23,80, 
  /* [9][0][][] */ 32,-39,22,-55,44,82,-27,40,28,-42,-73,-44,0,-31,127,13,-17,-113,56,37,-78,57,70,-23,16,-90,-13,65,34,53,-67,-39,-50,12,9,119,-38,-55,-71,2,-11,-13,26,105,59,67,-63,4, 
  /* [10][0][][] */ -27,34,-22,-19,26,45,-80,-35,46,47,71,-2,-31,-17,48,-53,-57,127,-13,61,-2,-9,21,25,-51,49,-2,101,34,6,-40,-18,75,15,-13,29,-4,-49,-38,19,-92,5,38,-18,29,43,49,45, 
  /* [11][0][][] */ -31,43,-23,32,36,51,9,11,26,28,-122,-65,84,41,0,-58,5,23,-54,-53,1,-10,127,26,35,16,-25,40,-8,40,12,58,23,-15,-28,0,47,96,108,18,28,-16,72,8,-40,-10,95,-1, 
  /* [12][0][][] */ -50,11,46,10,-44,-54,3,5,-32,-45,-124,10,64,-89,19,46,40,81,83,-127,-35,54,-36,-92,-16,-29,26,-36,15,20,-22,76,62,63,19,-29,-65,-21,19,-14,-28,1,70,15,15,-16,-38,-45, 
  /* [13][0][][] */ -84,-91,-59,-98,15,40,41,7,-127,23,122,-48,63,34,107,-12,121,38,4,-91,72,-97,98,-16,-92,25,-35,25,-33,-79,-89,19,41,-3,-70,68,14,-40,94,-74,-21,60,88,48,49,-18,120,-46, 
  /* [14][0][][] */ 69,38,-72,2,-58,1,-97,-26,-36,56,48,47,-7,-47,21,-61,40,-122,36,9,94,-43,34,3,-31,127,-107,10,-44,-20,-83,11,122,35,114,1,-87,22,-38,66,-28,-44,94,-13,-68,-40,-50,64, 
  /* [15][0][][] */ -93,33,44,10,122,14,-5,24,24,76,-16,74,73,-33,-57,-29,25,59,4,-39,12,-19,-77,-86,53,-69,-43,88,-28,14,22,3,-62,25,124,-8,-127,31,68,-25,-66,-41,13,2,-65,-37,-15,23, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.0040107048116624355, 0.0040669692680239677, 0.0043379487469792366, 0.005725550465285778, 0.0028453434351831675, 0.0061341286636888981, 0.0034628808498382568, 0.0051303952932357788, 0.0037225834093987942, 0.0030468197073787451, 0.0046150730922818184, 0.0054203872568905354, 0.0042371726594865322, 0.0027945549227297306, 0.0046433792449533939, 0.0044949040748178959, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data22[48] = { 13757, 483, 10892, -1350, 16893, -1487, 25750, 346, 12770, 32399, 302, 19904, 6311, 10190, 28620, 22219, 801, 5143, 9599, 41402, 2108, 11913, 1783, 15923, 17320, 52209, 1202, -653, -3625, 14521, 19216, -407, 1547, -2794, 1984, 16701, 8963, 25542, 1297, 25392, 17750, -4537, 1042, 12200, -4373, -1894, 54173, 24626, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 9.9076663900632411e-05, 8.1383281212765723e-05, 0.00010960949293803424, 0.00012146152585046366, 9.2436246632132679e-05, 0.00010184354323428124, 7.0154106651898474e-05, 0.00023548127501271665, 7.1816517447587103e-05, 6.4299412770196795e-05, 7.8718418080825359e-05, 9.4367722340393811e-05, 5.6357810535700992e-05, 9.9458360637072474e-05, 5.7240838941652328e-05, 8.3525723312050104e-05, 0.00014302217459771782, 5.7396478950977325e-05, 0.00014428480062633753, 5.0410810217726976e-05, 6.960878090467304e-05, 0.00011384787649149075, 9.7497431852389127e-05, 0.0001371063117403537, 0.00011025258572772145, 4.0643310057930648e-05, 7.4314310040790588e-05, 5.3600688261212781e-05, 0.00024451047647744417, 6.0944596043555066e-05, 8.2387312431819737e-05, 0.00025454838760197163, 0.00013942708028480411, 0.0001603628188604489, 6.4369742176495492e-05, 9.1148023784626275e-05, 0.00014478246157523245, 6.2119754147715867e-05, 0.00011308397370157763, 7.342841854551807e-05, 8.6165666289161891e-05, 0.00015342864207923412, 0.00023054650228004903, 7.1775037213228643e-05, 0.0002210560196544975, 7.7806456829421222e-05, 3.2057272619567811e-05, 5.9864945797016844e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ -101,49,-127,37,-99,53,-10,21,-108,-46,45,-56,95,-6,-27,-107,32,54,48,-52,54,-127,88,-51,-119,-75,71,90,-63,-127,-94,35,102,-66,115,-69,-89,-102,46,-74,16,-91,54,-75,127,96,-38,8, -79,127,-84,39,-120,127,-19,64,-102,-119,61,-55,95,-79,-9,-73,53,72,72,-124,116,-75,127,-54,-127,-127,32,91,28,-125,-57,6,43,-127,127,-77,-21,-91,68,-86,-21,74,76,-127,-2,103,-83,-49, -11,86,-11,30,-23,23,8,122,-38,-30,47,-9,36,-41,-14,8,78,59,27,-28,91,-23,37,-93,-75,-89,-4,11,99,-91,-48,-22,7,-22,69,-10,-30,-39,6,-94,-111,-29,40,-80,-65,28,-70,-25, 
  /* [0][1][][] */ -85,83,-19,66,-127,86,-118,127,-108,-51,84,-77,93,-52,-84,-82,101,96,-72,-111,127,-71,115,-71,-53,-63,127,80,-127,-127,-92,127,127,41,62,-127,-46,-127,92,-115,-29,-41,119,-105,121,127,-127,-89, -89,101,-58,127,-89,101,-127,111,-126,-127,127,-127,127,-127,-127,-127,127,127,-80,-127,121,-48,122,-127,-103,-125,93,127,26,-121,-99,98,126,36,94,-119,-16,-111,127,-93,-48,127,127,-83,-26,119,-101,-127, -21,40,-45,51,-71,2,-30,98,-86,-11,70,-14,36,-59,-35,20,27,68,-44,-52,41,-9,53,-62,-77,-123,20,55,97,-14,-127,28,26,34,70,-17,-61,21,63,-104,-73,-22,49,-36,-78,69,-48,-117, 
  /* [0][2][][] */ -69,76,-15,46,-36,21,-69,100,-127,-17,38,-54,-6,-11,-25,-65,23,69,-69,-3,16,-20,97,-14,-55,-9,69,14,-56,-8,-39,93,11,67,35,-100,-127,-18,41,-54,-127,-41,37,-61,62,55,-92,-54, -127,23,-53,61,-104,29,-64,67,-110,-21,69,-81,6,-54,-5,-39,2,82,-127,-33,-10,-37,98,-30,-72,-102,51,40,35,3,-53,89,6,59,30,-57,-53,-6,48,-127,-50,98,52,-94,-19,41,-110,-90, -69,102,-16,25,-79,-21,-36,65,-66,-4,44,-8,-8,-24,15,28,30,37,-53,-13,14,26,33,-22,-47,-47,-8,41,75,34,-47,31,-25,57,64,-2,-52,26,24,-61,-84,10,12,-55,-65,40,-16,-95, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0042107580229640007, 0.0034587893169373274, 0.0046584033407270908, 0.0051621147431433201, 0.0039285402745008469, 0.0043283505365252495, 0.0029815495945513248, 0.010007954202592373, 0.0030522020533680916, 0.0027327248826622963, 0.0033455328084528446, 0.0040106279775500298, 0.0023952068295329809, 0.0042269802652299404, 0.0024327356368303299, 0.0035498430952429771, 0.0060784425586462021, 0.0024393503554165363, 0.006132103968411684, 0.002142459386959672, 0.0029583731666207314, 0.0048385346308350563, 0.0041436408646404743, 0.0058270180597901344, 0.0046857348643243313, 0.0017273406265303493, 0.0031583581585437059, 0.0022780292201787233, 0.01039169542491436, 0.0025901452172547579, 0.0035014606546610594, 0.010818306356668472, 0.0059256507083773613, 0.0068154195323586464, 0.0027357139624655247, 0.0038737908471375704, 0.0061532543040812016, 0.0026400894857943058, 0.0048060687258839607, 0.003120707580819726, 0.0036620406899601221, 0.0065207174047827721, 0.0097982259467244148, 0.0030504390597343445, 0.0093948803842067719, 0.0033067744225263596, 0.0013624340062960982, 0.0025442601181566715, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data24[48] = { 4779, -1935, 641, -2144, 3335, -1714, 4558, -6731, 1918, 2078, 2224, 4422, 464, -99, 517, 5284, -2249, 6554, 9736, 439, -1072, 4174, -1593, 9344, 3549, 4969, 671, -1097, 6924, -927, 3690, -1898, -1737, 4108, -266, 4825, 2185, 799, 478, 6648, 2523, 7163, -4306, 947, 9331, 551, 5607, 4120, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00010185645805904642, 0.00021294254111126065, 0.00021368339366745204, 0.00017326870874967426, 0.00020818439952563494, 0.00013012612180318683, 0.00016418867744505405, 8.6226646089926362e-05, 0.00018430057389196008, 0.00016268783656414598, 0.00018579517200123519, 0.00015273684402927756, 0.00026020166114903986, 0.00024563996703363955, 0.0002569116186350584, 0.00012790336040779948, 0.00019852143304888159, 0.00011768663534894586, 9.6218762337230146e-05, 0.00030698825139552355, 0.00021603352797683328, 0.00015447493933606893, 0.00016679798136465251, 0.00010149677837034687, 0.00015021995932329446, 9.2654823674820364e-05, 0.00021525390911847353, 0.00022098480258136988, 0.00011226649803575128, 0.00024513754760846496, 0.00013951752043794841, 0.00014575597015209496, 0.00013622685219161212, 0.00015572666598018259, 0.00021167348313611001, 0.00012137199519202113, 0.00018909623031504452, 0.00020314143330324441, 0.00015131435065995902, 0.0001285663602175191, 0.00020120137196499854, 0.00011819163046311587, 0.00012515565322246403, 0.00024013337679207325, 0.00010083802044391632, 0.00019603258988354355, 0.00010945130634354427, 0.00015817749954294413, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ 85,24,125,-56,64,127,-91,-70, 
  /* [1][0][][] */ 24,-93,-127,10,65,37,36,26, 
  /* [2][0][][] */ -127,-1,-66,-25,71,51,-91,-43, 
  /* [3][0][][] */ 25,66,104,-73,-37,-127,-14,-31, 
  /* [4][0][][] */ -127,21,-44,-27,28,17,-47,-40, 
  /* [5][0][][] */ -88,33,-67,4,1,62,-80,-127, 
  /* [6][0][][] */ -25,-127,-108,21,74,25,18,45, 
  /* [7][0][][] */ -78,-127,-119,-79,-68,-67,12,77, 
  /* [8][0][][] */ 98,10,-15,-25,115,-85,-127,9, 
  /* [9][0][][] */ -29,42,-55,74,-67,-33,127,-27, 
  /* [10][0][][] */ -21,110,33,67,127,-14,-21,53, 
  /* [11][0][][] */ -106,-17,-22,-9,-110,127,116,-1, 
  /* [12][0][][] */ 86,21,-127,35,-6,-35,-45,-27, 
  /* [13][0][][] */ 30,-33,-39,8,-17,-127,-17,-27, 
  /* [14][0][][] */ 22,-83,67,1,127,-113,-88,71, 
  /* [15][0][][] */ -42,-36,-21,127,53,108,-91,51, 
  /* [16][0][][] */ 103,28,-43,23,56,-109,-127,-34, 
  /* [17][0][][] */ 71,127,32,69,63,69,13,-80, 
  /* [18][0][][] */ 17,1,13,-6,127,4,1,-10, 
  /* [19][0][][] */ 17,127,42,15,-102,14,15,-55, 
  /* [20][0][][] */ -42,1,66,-110,29,27,-7,127, 
  /* [21][0][][] */ -45,89,49,-99,25,65,17,127, 
  /* [22][0][][] */ -63,-51,-76,23,-127,116,88,-5, 
  /* [23][0][][] */ 94,33,-127,39,3,-83,-53,3, 
  /* [24][0][][] */ -62,36,13,31,-27,84,-127,125, 
  /* [25][0][][] */ -122,-75,-127,3,-78,-78,93,95, 
  /* [26][0][][] */ 57,3,-24,-29,127,-13,109,-38, 
  /* [27][0][][] */ 118,-62,32,127,-1,45,-22,85, 
  /* [28][0][][] */ 39,52,57,0,127,-55,49,-38, 
  /* [29][0][][] */ -25,-8,-28,-49,-43,37,127,-35, 
  /* [30][0][][] */ 25,-118,-60,-44,-127,-24,16,-72, 
  /* [31][0][][] */ 5,36,7,-6,-127,-2,-29,-30, 
  /* [32][0][][] */ 43,-56,-84,100,-1,-106,103,-127, 
  /* [33][0][][] */ 23,127,65,53,58,-8,-48,21, 
  /* [34][0][][] */ -127,-54,122,11,-25,85,119,17, 
  /* [35][0][][] */ -42,89,127,11,-110,-121,-41,33, 
  /* [36][0][][] */ -127,10,110,-54,-13,117,94,28, 
  /* [37][0][][] */ -16,-86,-21,-127,-27,-61,61,32, 
  /* [38][0][][] */ 48,-16,77,-45,41,68,-127,10, 
  /* [39][0][][] */ -6,99,-127,-28,-37,-28,-16,75, 
  /* [40][0][][] */ 68,-68,30,42,20,11,4,127, 
  /* [41][0][][] */ -10,87,127,-1,9,54,-32,17, 
  /* [42][0][][] */ 66,-127,-124,-1,-110,-13,15,-104, 
  /* [43][0][][] */ 0,-79,45,-42,127,-3,16,30, 
  /* [44][0][][] */ 34,73,127,21,-3,40,-61,-2, 
  /* [45][0][][] */ -37,49,0,74,-106,76,-127,-1, 
  /* [46][0][][] */ -55,-53,44,32,-127,-97,-19,-16, 
  /* [47][0][][] */ -42,69,60,-91,-127,24,-17,71, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.0014957977691665292, 0.0031271358020603657, 0.0031380155123770237, 0.0025445115752518177, 0.0030572607647627592, 0.0019109477289021015, 0.0024111683014780283, 0.0012662685476243496, 0.0027065183967351913, 0.002389127854257822, 0.002728467108681798, 0.0022429940290749073, 0.0038211527280509472, 0.0036073089577257633, 0.0037728371098637581, 0.0018783056875690818, 0.0029153567738831043, 0.0017282695043832064, 0.0014130062190815806, 0.0045082299038767815, 0.0031725279986858368, 0.0022685185540467501, 0.0024494868703186512, 0.0014905157731845975, 0.0022060326300561428, 0.0013606685679405928, 0.0031610790174454451, 0.003245239146053791, 0.0016486728563904762, 0.0035999305546283722, 0.0020488635636866093, 0.0021404775325208902, 0.0020005390979349613, 0.0022869005333632231, 0.003108499338850379, 0.0017823902890086174, 0.0027769443113356829, 0.0029832031577825546, 0.0022221042308956385, 0.0018880419665947556, 0.0029547126032412052, 0.0017356855096295476, 0.0018379546236246824, 0.0035264426842331886, 0.0014808416599407792, 0.0028788072522729635, 0.0016073307488113642, 0.0023228919599205256, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data26[8] = { -590, 1265, 22045, -6406, 3376, -14939, -147, -8199, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 6.2228398746810853e-05, 8.428826549788937e-05, 0.00015281880041584373, 8.0260142567567527e-05, 0.0001209200345329009, 0.00010604364797472954, 8.7335771240759641e-05, 6.0917373048141599e-05, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -36,-37,-29,-66,-21,5,80,122,-96,-127,-40,17,-66,-25,-69,43,-96,15,5,126,78,-36,47,96,70,83,42,10,-96,-56,-89,-52,-30,93,77,-41,12,-41,110,-1,33,-13,15,-94,17,-17,-19,-98, 
  /* [1][0][][] */ -35,49,-39,-32,-96,46,-39,-41,-30,74,-32,7,57,42,-56,-19,-6,-119,65,-54,127,25,-48,26,32,-4,-97,79,47,-18,48,26,-17,-12,-4,-26,-6,95,2,-43,50,45,-24,-9,97,36,-21,42, 
  /* [2][0][][] */ -38,-27,89,-6,52,-28,-25,24,-21,1,-6,31,-2,-36,-52,-127,-34,-80,-22,16,-97,35,-36,-29,-42,5,8,-33,-41,4,-35,-8,5,-1,25,-9,18,-28,-37,-8,14,-29,33,-47,-37,-20,-48,-54, 
  /* [3][0][][] */ 26,-3,64,1,20,-15,37,71,-65,-28,35,-3,-41,66,3,57,76,14,-23,40,-88,-66,127,14,20,23,-49,-28,-19,49,107,-51,-6,-110,-21,55,-6,-67,-15,55,-85,-45,41,1,-85,-79,36,8, 
  /* [4][0][][] */ 24,-25,63,-45,8,-18,-1,-7,-59,18,-9,20,53,-72,36,-93,56,44,-8,-20,5,29,16,0,-5,21,54,-13,25,28,-127,-24,-18,-15,-16,28,35,-10,35,10,-54,12,-72,27,-17,-84,3,23, 
  /* [5][0][][] */ 10,-45,71,46,24,23,20,-7,-67,-3,-41,17,35,2,3,-39,100,75,4,-3,73,-44,127,-87,-10,48,2,40,20,17,-30,-60,-14,-29,-48,13,27,29,57,20,-98,35,33,19,65,-27,88,2, 
  /* [6][0][][] */ -18,57,-100,75,62,15,44,10,-19,2,78,-65,-81,-18,-31,34,-127,25,3,71,28,60,-102,-73,3,-15,46,87,-26,-17,-17,-6,21,76,-46,-17,12,14,81,19,95,63,-96,-51,-18,112,-47,-16, 
  /* [7][0][][] */ -14,86,-109,21,-13,42,127,49,56,86,-113,-10,-75,-16,-86,-71,64,48,103,106,82,-8,118,-7,83,78,-58,104,-87,15,-20,-71,1,-88,-35,15,27,108,-57,54,-79,57,-21,-91,64,16,63,-61, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.0026447069831192493, 0.0035822512581944466, 0.0064947991631925106, 0.0034110560081899166, 0.0051391012966632843, 0.0045068548060953617, 0.0037117700558155775, 0.0025889882817864418, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data28[48] = { -3953, 10716, -384, -380, -1668, -550, 2369, 1670, -5448, 1309, -13805, -43, 2177, -424, 1058, 5515, 7857, 2720, -60, -5634, -6923, -3527, 18112, -5808, -1036, -1210, 8029, -5089, 4825, 5485, -8361, 14104, 5121, -1121, 6948, -1575, -99, -765, 8030, 3067, 3374, 1447, 3182, 537, -4381, 9253, 1410, 6638, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00017477260553278029, 0.00013362962636165321, 0.00064004724845290184, 0.00026340881595388055, 0.00017445415141992271, 0.00030054786475375295, 0.00020066030265297741, 0.00025726412422955036, 0.00010044607915915549, 0.00024219426268246025, 0.00012536886788439006, 0.00076078728307038546, 0.00031383446184918284, 0.00077899283496662974, 0.00049926218343898654, 0.00052317709196358919, 0.00015731876192148775, 7.3807488661259413e-05, 0.00022538141638506204, 0.00021277939958963543, 0.00021800208196509629, 0.00021912080410402268, 0.00011307438398944214, 0.00034392724046483636, 0.00014829249994363636, 0.00034199518267996609, 0.00038920537917874753, 0.00019722124852705747, 0.00022503362561110407, 0.00023261709429789335, 0.00010942789231194183, 9.6532065072096884e-05, 9.3977156211622059e-05, 0.00017511224723421037, 0.00015199453628156334, 0.00033106128103099763, 0.0024826405569911003, 0.00031337499967776239, 0.00020241588936187327, 0.00012837271788157523, 0.00019449640240054578, 0.00013855552242603153, 0.00025959301274269819, 0.0002000223466893658, 0.00023282594338525087, 7.431113044731319e-05, 5.311564018484205e-05, 0.00018667394760996103, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 33,-31,8,7,4,-119,-38,18,-35,18,27,16,37,19,-25,6,91,2,16,-7,-6,-3,-96,20,-34,5,-13,-52,-114,54,-47,-75,42,2,-68,-46,-7,-28,24,-29,-10,46,12,9,1,79,127,-23, -105,-95,-22,127,-50,36,-116,127,42,13,21,-1,41,45,-20,-49,-21,40,29,5,3,127,6,127,109,-4,-54,15,69,-127,-35,-127,44,-23,-63,-119,36,14,-56,-63,-127,-28,-81,-127,47,91,49,93, 10,-8,10,9,-15,-8,26,48,6,-60,13,8,-43,8,-23,3,-73,29,-60,-3,-11,-6,127,36,-60,23,-4,-3,-32,12,-4,-11,-19,0,-55,77,5,9,19,74,34,-43,29,-66,4,26,-52,-61, 
  /* [0][1][][] */ 2,1,-34,-5,50,-127,127,-126,-12,27,85,29,127,12,-6,-21,-18,-14,4,34,47,-49,29,6,-111,127,-73,-37,115,-102,67,-88,-27,0,-100,23,17,-63,-19,-14,127,127,-5,-93,-49,-73,-14,66, 127,-127,127,-3,127,30,-69,-56,43,127,127,-127,-101,127,127,127,127,121,119,127,127,122,-31,-2,107,-115,-127,112,32,93,127,-37,-127,127,127,127,-127,127,-127,-127,40,11,-127,-9,127,-127,7,63, 21,11,-46,-1,-32,82,-118,95,127,-110,32,56,-57,0,-3,-53,27,-2,-127,33,19,-85,-77,10,100,-21,-25,127,-127,-68,37,-84,-37,40,89,-18,38,-1,8,-97,122,-22,33,53,-43,79,107,-103, 
  /* [0][2][][] */ 13,41,8,-40,5,-85,-4,-43,-27,13,53,-6,5,-44,-17,-12,-51,13,-8,-37,8,-5,82,-12,-127,-11,28,-32,20,-11,-19,39,21,-9,-66,43,3,-3,10,25,-10,-10,-8,42,-6,-4,-12,-29, 62,-27,-30,-37,30,10,120,-60,120,-52,23,-1,-54,-49,-46,-86,0,127,4,35,30,32,-66,-28,-96,51,55,-4,-90,-2,-50,-72,6,12,-36,27,64,-21,-7,88,-104,-24,-16,94,44,55,48,-127, -19,16,3,-24,-5,-28,-7,-24,-4,-40,-4,-2,15,-36,-33,2,62,43,-24,-4,4,2,-101,-4,60,-35,10,2,-38,-26,-24,-31,40,13,-45,-41,-15,14,20,18,8,-29,4,47,1,-7,95,-59, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.007688495796173811, 0.005878557451069355, 0.028156589716672897, 0.011587729677557945, 0.0076744868420064449, 0.013221529312431812, 0.0088273324072360992, 0.011317415162920952, 0.004418766126036644, 0.010654470883309841, 0.005515154916793108, 0.033468116074800491, 0.013806025497615337, 0.034269005060195923, 0.021963255479931831, 0.023015305399894714, 0.0069206766784191132, 0.0032468966674059629, 0.0099148498848080635, 0.0093604689463973045, 0.0095902225002646446, 0.0096394363790750504, 0.0049743033014237881, 0.015129849314689636, 0.006523598451167345, 0.015044855885207653, 0.017121698707342148, 0.0086760437116026878, 0.0098995501175522804, 0.010233157314360142, 0.0048138890415430069, 0.0042465832084417343, 0.0041341888718307018, 0.0077034370042383671, 0.0066864560358226299, 0.014563857577741146, 0.1092148944735527, 0.013785813003778458, 0.0089045632630586624, 0.0056472988799214363, 0.0085561741143465042, 0.0060952547937631607, 0.011419866234064102, 0.0087992679327726364, 0.010242344811558723, 0.0032690525986254215, 0.0023366326931864023, 0.0082120532169938087, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data30[48] = { 2941, 3835, 15884, 2500, 1739, -3263, 4576, 11399, 3380, -552, 6956, -1357, 10649, -3108, 2926, 33431, 8, 2087, -110, 2235, 4816, 2936, 938, 35162, 8351, 4527, 13114, 2051, 17401, 7120, 1355, 990, 535, 2560, -164, 102, -4147, -327, 5125, 2645, 7917, 4304, 3607, 5800, 4658, 3255, 2268, 15536, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 0.000172104497323744, 0.00020803917141165584, 6.5332766098435968e-05, 0.00015496209380216897, 0.00022470680414699018, 0.00015351605543401092, 0.00015890211216174066, 7.9429933975916356e-05, 0.00013737972767557949, 0.00023571474594064057, 0.00012392390635795891, 0.0002744407975114882, 7.7442717156372964e-05, 0.0001646012970013544, 0.00020054384367540479, 3.5116645449306816e-05, 0.00043460819870233536, 0.00022304682352114469, 0.00019466897356323898, 0.00026328681269660592, 0.00014385991380549967, 0.0002191442035837099, 0.0003024066099897027, 3.2223517337115481e-05, 0.00011174519750056788, 0.00013726713950745761, 7.4502262577880174e-05, 0.00021376195945776999, 5.8164558140560985e-05, 0.00011816580808954313, 0.00026667377096600831, 0.00040981842903420329, 0.00022814792464487255, 0.00015447412442881614, 0.00018541024473961443, 0.00023871779558248818, 0.00014466681750491261, 0.0002018494124058634, 0.00013950288121122867, 0.00018418340187054127, 0.0001092562815756537, 0.0001400636974722147, 0.00021678787015844136, 0.00015052362869028002, 0.00014136329991742969, 0.00021616420417558402, 0.0002824287221301347, 6.6348300606478006e-05, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 82,106,-67,-100,15,127,37,96, 
  /* [1][0][][] */ 66,-57,54,-127,-51,88,-86,-21, 
  /* [2][0][][] */ -27,127,91,40,105,18,35,27, 
  /* [3][0][][] */ 89,52,-43,91,3,-84,-127,-26, 
  /* [4][0][][] */ -19,40,25,-66,-19,115,127,73, 
  /* [5][0][][] */ 63,98,-111,-40,56,127,38,-29, 
  /* [6][0][][] */ -17,127,57,42,60,26,5,-73, 
  /* [7][0][][] */ 92,-56,-78,12,23,9,127,-13, 
  /* [8][0][][] */ 28,108,77,46,84,109,127,-78, 
  /* [9][0][][] */ 35,79,-127,-64,-6,99,1,37, 
  /* [10][0][][] */ -87,-50,5,-68,-24,-22,-38,127, 
  /* [11][0][][] */ 0,-84,-127,-30,23,2,20,12, 
  /* [12][0][][] */ 3,-127,-98,-40,-93,13,-17,78, 
  /* [13][0][][] */ -7,-4,-99,127,-119,-35,16,-45, 
  /* [14][0][][] */ -53,-33,-127,-7,22,11,-12,-46, 
  /* [15][0][][] */ 28,-52,-127,37,-101,-32,-43,-31, 
  /* [16][0][][] */ 127,-52,-10,48,-80,23,33,85, 
  /* [17][0][][] */ -25,77,127,-40,-44,12,-10,1, 
  /* [18][0][][] */ 18,-127,64,103,-5,-70,31,-110, 
  /* [19][0][][] */ 127,-34,-62,39,-78,12,25,119, 
  /* [20][0][][] */ -18,-127,116,93,-2,-100,-8,-82, 
  /* [21][0][][] */ 22,-53,-7,-37,127,-8,35,11, 
  /* [22][0][][] */ -127,18,-50,50,29,42,-64,-96, 
  /* [23][0][][] */ -71,-65,48,-15,-90,99,127,-70, 
  /* [24][0][][] */ -37,71,23,-32,-3,127,107,0, 
  /* [25][0][][] */ -78,-127,-88,-57,-68,-7,-41,-49, 
  /* [26][0][][] */ -29,54,-13,127,-106,50,-34,-1, 
  /* [27][0][][] */ 25,-103,25,104,11,-64,-4,-127, 
  /* [28][0][][] */ 10,122,101,77,127,-37,43,-100, 
  /* [29][0][][] */ 77,47,2,20,81,-127,-82,48, 
  /* [30][0][][] */ 20,-11,49,-127,13,-9,33,-40, 
  /* [31][0][][] */ 49,-31,-2,57,-20,32,-2,127, 
  /* [32][0][][] */ -36,-81,36,-47,-43,127,71,41, 
  /* [33][0][][] */ -20,61,65,-54,57,123,-127,74, 
  /* [34][0][][] */ 58,127,-97,-71,46,91,-58,33, 
  /* [35][0][][] */ -2,-127,5,60,-37,-69,38,-34, 
  /* [36][0][][] */ -5,-46,-80,-5,-127,-63,-30,11, 
  /* [37][0][][] */ -21,-125,102,127,-26,-112,-8,-62, 
  /* [38][0][][] */ -76,23,47,-61,-127,-79,-43,59, 
  /* [39][0][][] */ 88,-127,87,69,-20,-96,-28,-90, 
  /* [40][0][][] */ 7,107,10,49,-127,-16,-92,62, 
  /* [41][0][][] */ 117,127,-92,-102,35,29,-26,33, 
  /* [42][0][][] */ -5,-53,-16,10,127,7,46,27, 
  /* [43][0][][] */ 127,11,77,16,-46,-26,70,96, 
  /* [44][0][][] */ 90,61,-4,19,76,-80,-127,10, 
  /* [45][0][][] */ 17,21,21,25,86,-127,-15,-33, 
  /* [46][0][][] */ 76,-33,-17,127,26,86,38,98, 
  /* [47][0][][] */ -62,-79,51,127,-28,35,123,-103, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.0028641857206821442, 0.0034622154198586941, 0.0010872764978557825, 0.002578899497166276, 0.0037396003026515245, 0.0025548343546688557, 0.0026444699615240097, 0.0013218834064900875, 0.0022862914483994246, 0.0039227958768606186, 0.0020623579621315002, 0.0045672799460589886, 0.0012888119090348482, 0.002739316551014781, 0.0033374771010130644, 0.0005844158586114645, 0.0072328071109950542, 0.0037119747139513493, 0.0032397066242992878, 0.0043816538527607918, 0.0023941355757415295, 0.0036470266059041023, 0.0050326907075941563, 0.00053626799490302801, 0.0018596783047541976, 0.0022844178602099419, 0.0012398764956742525, 0.0035574547946453094, 0.0009679822251200676, 0.0019665309228003025, 0.0044380202889442444, 0.0068202521651983261, 0.0037968677934259176, 0.0025707788299769163, 0.0030856216326355934, 0.0039727729745209217, 0.00240756431594491, 0.0033592046238481998, 0.0023216253612190485, 0.0030652044806629419, 0.0018182573840022087, 0.0023309586104005575, 0.003607812337577343, 0.0025050339754670858, 0.0023525867145508528, 0.0035974332131445408, 0.0047002159990370274, 0.0011041772086173296, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data32[8] = { 6567, 13365, -4420, 8244, -3093, 2605, -15497, -18186, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.0001356687571387738, 0.00013718802074436098, 0.0001313428656430915, 0.0001240497367689386, 0.00017669028602540493, 0.00013372805551625788, 0.00012956402497366071, 0.00011206751514691859, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -40,-10,27,22,-38,-5,11,10,-31,9,-56,-68,-36,-61,-4,-18,55,-50,41,37,-12,27,-42,6,-3,-41,72,-29,-10,-20,33,6,86,33,40,-127,25,10,-11,-48,14,-17,52,59,37,5,38,4, 
  /* [1][0][][] */ -10,39,45,-9,-3,53,-51,-32,-1,10,-1,-74,-1,87,-29,44,-24,10,-20,-46,15,-75,-11,18,-61,-22,-6,-90,-26,-11,28,-38,44,67,-27,-2,127,-33,-6,44,-31,51,-79,-34,96,-13,-32,-13, 
  /* [2][0][][] */ -17,-3,-71,19,7,66,31,-1,-12,53,10,31,68,-78,12,-50,35,-96,17,30,-24,43,-6,21,-16,55,-20,-68,6,-5,21,-70,-47,-90,37,-27,115,14,-18,-70,10,42,86,24,127,11,31,29, 
  /* [3][0][][] */ -11,27,-68,40,13,-21,-71,-95,-7,-14,-24,1,-9,20,38,67,-2,14,-41,25,15,-98,32,-45,-71,-26,127,-7,-54,14,-66,20,1,-83,8,-19,-16,-38,-25,98,-43,-37,9,13,20,3,-41,39, 
  /* [4][0][][] */ -26,-50,0,7,30,-28,-2,-8,30,-28,71,-81,6,42,14,7,-21,-20,20,-21,6,-45,2,-20,17,-17,43,49,42,32,-8,25,-8,0,6,-7,-66,90,33,-25,26,-17,-16,-20,-69,18,127,13, 
  /* [5][0][][] */ 48,-18,1,24,37,-27,38,-127,24,-17,-17,106,-76,63,14,-58,6,-83,10,0,-42,71,-55,-37,-66,77,-17,-7,-2,33,-28,-37,31,59,32,-3,-49,4,-31,-41,17,-36,-34,2,-39,71,91,29, 
  /* [6][0][][] */ 58,-25,20,-12,-46,-29,-34,23,-37,0,-46,127,-34,-42,9,64,27,47,3,37,38,-81,-23,18,28,58,-64,12,-1,-38,18,45,9,21,-20,5,-3,6,11,-6,8,-29,48,69,2,-42,89,-10, 
  /* [7][0][][] */ -40,19,-7,69,26,27,13,40,24,6,83,7,127,117,68,56,39,57,-18,5,30,-36,-97,-40,27,-14,-36,72,36,-33,-40,-28,40,7,45,-109,-81,26,34,56,-41,24,88,122,-70,-35,-121,58, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.0057659219019114971, 0.0058304904960095882, 0.005582071840763092, 0.0052721137180924416, 0.0075093372724950314, 0.0056834421120584011, 0.005506470799446106, 0.0047628693282604218, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data34[48] = { 14489, 3884, 4793, -479, 1404, -1724, -1374, 26702, 2269, 2389, 4943, 50774, 1201, 4401, -63, 8114, -3806, 13223, -5579, 8917, 15261, 711, 4452, -11359, 12343, 1064, 1198, 14092, 2802, -309, -7468, 20362, 3826, 4741, 1273, 4917, -6884, 10250, 906, 18113, -2946, -4582, 8477, 3731, -1749, -1345, 2237, 360, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 7.7262717240955681e-05, 0.00013842420594301075, 0.00016871512343641371, 0.00022399151930585504, 0.00085580936865881085, 0.00021669623674824834, 0.00011063404235756025, 9.8168384283781052e-05, 0.00012350577162578702, 0.00010077903425553814, 6.4022446167655289e-05, 6.7635795858222991e-05, 0.00010095808829646558, 5.8550027461024001e-05, 0.00024792453041300178, 0.00019063289801124483, 0.0001018129987642169, 0.0003928913502022624, 0.00011644319602055475, 9.9006574600934982e-05, 8.1191530625801533e-05, 0.00064564507920295, 9.4125025498215109e-05, 0.00014378607738763094, 0.00011287682718830183, 0.00010611926700221375, 7.5538686360232532e-05, 7.9555917182005942e-05, 0.00026139616966247559, 0.00055033841636031866, 0.00021407332678791136, 6.6565087763592601e-05, 8.4162333223503083e-05, 0.00016581418458372355, 0.00024652114370837808, 6.1067948990967125e-05, 9.556417353451252e-05, 5.1362894737394527e-05, 0.00011588207416934893, 6.8801135057583451e-05, 0.00012506805069278926, 0.00020269489323254675, 6.45379041088745e-05, 6.990144174778834e-05, 0.00010075268801301718, 0.00035195192322134972, 8.2732316514011472e-05, 0.00020172353833913803, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -78,-55,-68,-23,127,-72,68,-50,-96,-79,-24,-56,81,58,47,-76,40,-8,15,-39,-127,34,-38,36,-65,63,42,-21,43,-71,39,-66,-127,-72,23,77,-24,107,100,-19,-127,2,24,91,32,-97,46,61, -42,-91,-58,60,-62,68,118,-48,-82,28,117,-127,105,110,122,-52,-99,-78,58,-85,-100,57,-43,127,-64,127,66,-100,59,-47,2,-127,-18,-51,44,127,110,127,102,-85,-85,-45,54,93,54,86,89,62, 5,-36,-31,122,-70,-26,50,20,55,27,110,-76,28,44,-41,24,-44,-6,50,-12,-21,-36,-127,18,-81,57,-8,-83,33,55,127,-46,1,6,-21,21,69,66,20,-4,-33,90,51,29,38,18,5,-94, 
  /* [0][1][][] */ -127,-52,-71,-86,-64,-77,79,-91,-127,-127,66,-50,61,83,-127,-79,127,-118,-37,-56,-94,89,-88,30,-51,53,127,-55,-94,-77,23,-105,-105,-119,-127,54,7,70,7,-75,63,4,87,92,63,127,127,-127, -119,-127,-127,-127,-19,127,127,-127,65,67,127,-95,127,127,52,-127,89,-127,-112,-127,-97,127,-127,125,-127,62,108,-119,-127,127,-10,-122,-120,-127,46,99,127,103,-6,-127,102,-64,127,127,127,3,96,74, -117,-50,-118,90,40,-26,125,11,43,27,36,-36,26,64,98,-60,24,16,5,-91,-47,-5,-55,-1,-58,50,0,-127,-49,38,86,-100,-75,-18,59,65,45,36,-25,-45,74,127,72,11,47,-48,31,16, 
  /* [0][2][][] */ -63,7,-21,16,-20,-19,59,-40,9,-30,-1,-51,-3,21,-44,14,-56,-38,127,-8,-53,-31,-101,-20,-47,33,70,-21,29,52,13,-75,-13,-93,-28,37,23,43,-71,-57,-3,8,27,57,20,72,29,-77, -88,-49,-20,-37,92,56,84,-75,76,20,-30,-70,-6,36,-108,-44,43,-2,74,-73,-104,-15,-33,36,-58,26,60,-27,17,-6,-41,-52,-62,-16,-63,58,28,49,-127,-70,35,-18,54,70,41,-104,49,4, -56,-28,-19,-5,-56,-8,41,24,-50,-11,-29,1,15,-8,36,-25,43,54,18,-16,-103,-64,-20,-28,-47,31,15,-15,27,-65,5,-41,-54,22,41,61,5,47,-77,-64,16,61,3,5,14,-25,31,16, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0032836655154824257, 0.0058830287307500839, 0.0071703926660120487, 0.0095196394249796867, 0.036371897906064987, 0.0092095900326967239, 0.0047019468620419502, 0.004172156099230051, 0.0052489950321614742, 0.0042831087484955788, 0.0027209538966417313, 0.0028745213057845831, 0.0042907185852527618, 0.0024883761070668697, 0.010536791756749153, 0.0081018982455134392, 0.0043270522728562355, 0.016697881743311882, 0.0049488358199596405, 0.0042077791877090931, 0.0034506400115787983, 0.027439916506409645, 0.0040003135800361633, 0.0061109084635972977, 0.0047972649335861206, 0.0045100688003003597, 0.0032103941775858402, 0.0033811263274401426, 0.011109337210655212, 0.023389382287859917, 0.0090981163084506989, 0.0028290161862969398, 0.0035768989473581314, 0.0070471027866005898, 0.010477147996425629, 0.0025953878648579121, 0.0040614772588014603, 0.002182923024520278, 0.0049249879084527493, 0.0029240481089800596, 0.0053153922781348228, 0.0086145326495170593, 0.0027428609319031239, 0.0029708112124353647, 0.004281989298760891, 0.014957956969738007, 0.0035161233972758055, 0.008573249913752079, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data36[48] = { 1117, -320, -452, 751, 34784, 2275, -436, 4244, 1196, 1257, 388, 6406, 1414, 628, -632, 226, 2778, 15006, 3485, -848, 1226, -1968, -88, 2406, -495, -922, 2200, -263, 3448, 8771, 2092, 185, 184, 103, 3792, 104, 149, -383, 1582, 1004, 2158, 1808, 56, -243, 492, 2162, 904, -262, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00048779646749608219, 0.00045619931188412011, 0.00038363537169061601, 0.0004086393746547401, 3.2965839636744931e-05, 0.00032393689616583288, 0.00055836798856034875, 0.00019702421559486538, 0.00033810592140071094, 0.00053073751041665673, 0.00035131839103996754, 0.00015429721679538488, 0.00022664580319542438, 0.00043056532740592957, 0.00036574940895661712, 0.00033702648943290114, 0.00025714645744301379, 6.5733678638935089e-05, 0.00022062516654841602, 0.00035511117312125862, 0.00042901301640085876, 0.00016571325249969959, 0.00048788604908622801, 0.00030674011213704944, 0.0004515221226029098, 0.0006336849182844162, 0.00025843078037723899, 0.00072382227517664433, 0.00024043225857894868, 0.00010369005030952394, 0.00033033426734618843, 0.00057884718989953399, 0.00043660102528519928, 0.00045193717232905328, 0.00025212677428498864, 0.00040111812995746732, 0.0004473631561268121, 0.0006882961024530232, 0.00038589822361245751, 0.00048687923117540777, 0.00029889500001445413, 0.00034269533352926373, 0.00035758170997723937, 0.00053145142737776041, 0.0004872404970228672, 0.00026693465770222247, 0.00029561165138147771, 0.00033669368713162839, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ -30,10,9,-21,-96,-28,-127,26, 
  /* [1][0][][] */ 72,-63,-54,-34,127,-109,86,18, 
  /* [2][0][][] */ -88,98,-47,-127,45,7,-32,29, 
  /* [3][0][][] */ -5,62,127,-13,97,107,86,5, 
  /* [4][0][][] */ -83,-114,56,5,-57,-127,5,-29, 
  /* [5][0][][] */ 127,-24,55,37,-84,-22,21,-15, 
  /* [6][0][][] */ 24,31,127,-42,37,-22,-25,23, 
  /* [7][0][][] */ 18,6,-127,-70,-48,97,116,-88, 
  /* [8][0][][] */ -8,127,-42,1,29,97,22,72, 
  /* [9][0][][] */ -24,127,-40,62,27,-115,33,100, 
  /* [10][0][][] */ 19,-104,-23,-29,-52,-127,-63,-92, 
  /* [11][0][][] */ -127,-114,118,58,-32,-82,116,62, 
  /* [12][0][][] */ -14,44,-127,72,28,-66,-76,74, 
  /* [13][0][][] */ 102,-127,90,62,12,29,36,-74, 
  /* [14][0][][] */ -24,86,-15,-126,-35,-127,-49,-67, 
  /* [15][0][][] */ 34,100,37,-8,17,-53,110,-127, 
  /* [16][0][][] */ -127,-93,-64,64,-50,20,-10,80, 
  /* [17][0][][] */ -48,-127,-119,49,-76,119,-17,72, 
  /* [18][0][][] */ -123,-87,-78,88,-10,43,-26,127, 
  /* [19][0][][] */ 61,-127,68,-122,-7,-63,15,-34, 
  /* [20][0][][] */ -13,63,28,-15,26,127,78,-11, 
  /* [21][0][][] */ 31,106,55,-32,31,-65,94,-127, 
  /* [22][0][][] */ 25,4,106,21,-40,127,27,-33, 
  /* [23][0][][] */ -124,-91,21,-55,91,127,-79,-96, 
  /* [24][0][][] */ -64,-85,45,-75,83,91,-40,-127, 
  /* [25][0][][] */ 127,15,-52,-11,16,49,-61,3, 
  /* [26][0][][] */ -127,-46,-120,-37,-65,-40,23,-4, 
  /* [27][0][][] */ 58,25,-2,-41,-127,-10,75,97, 
  /* [28][0][][] */ -118,-89,0,65,-49,-127,-6,12, 
  /* [29][0][][] */ 114,77,44,-127,31,7,-27,-102, 
  /* [30][0][][] */ -111,-92,16,-47,61,94,-53,-127, 
  /* [31][0][][] */ 60,59,-5,127,16,-81,0,6, 
  /* [32][0][][] */ -36,127,-16,30,15,78,-10,51, 
  /* [33][0][][] */ -26,127,-55,1,33,-27,-30,-12, 
  /* [34][0][][] */ -64,-121,-9,127,-19,11,39,71, 
  /* [35][0][][] */ -34,127,-23,3,80,85,38,54, 
  /* [36][0][][] */ 53,6,4,-31,-127,-24,102,76, 
  /* [37][0][][] */ -52,82,19,18,-127,90,-20,-97, 
  /* [38][0][][] */ 42,15,13,9,127,74,115,39, 
  /* [39][0][][] */ -32,-90,46,-19,-13,35,-84,127, 
  /* [40][0][][] */ -66,-61,-53,127,-25,18,-8,84, 
  /* [41][0][][] */ 127,31,32,127,-23,-17,-21,-9, 
  /* [42][0][][] */ -61,2,-89,-127,51,-102,-6,109, 
  /* [43][0][][] */ 27,4,95,-4,39,127,83,11, 
  /* [44][0][][] */ -31,-29,-64,127,38,15,-40,-31, 
  /* [45][0][][] */ 36,76,62,-116,50,-46,6,-127, 
  /* [46][0][][] */ -43,-127,-33,31,-14,31,-54,118, 
  /* [47][0][][] */ 77,35,127,42,58,125,119,-1, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.004906756803393364, 0.0045889201574027538, 0.0038589977193623781, 0.0041105137206614017, 0.000331604212988168, 0.0032584893051534891, 0.0056166374124586582, 0.001981871435418725, 0.0034010158851742744, 0.0053387018851935863, 0.0035339202731847763, 0.0015520795714110136, 0.0022798357531428337, 0.0043310672044754028, 0.0036790824960917234, 0.0033901578281074762, 0.0025866425130516291, 0.00066121673444285989, 0.002219273941591382, 0.003572072135284543, 0.0043154526501893997, 0.001666913740336895, 0.0049076578579843044, 0.0030855063814669847, 0.0045418720692396164, 0.0063742524944245815, 0.0025995615869760513, 0.0072809462435543537, 0.0024185141082853079, 0.0010430207476019859, 0.0033228404354304075, 0.0058226380497217178, 0.0043917805887758732, 0.0045460471883416176, 0.002536149462684989, 0.004034857265651226, 0.0045000370591878891, 0.0069235875271260738, 0.0038817597087472677, 0.0048975301906466484, 0.0030065921600908041, 0.0034471808467060328, 0.0035969233140349388, 0.005345882847905159, 0.004901164211332798, 0.0026851024013012648, 0.002973564900457859, 0.0033868101891130209, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data38[8] = { -6401, -3348, 11765, -10377, 23277, 8743, -7098, 11772, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.00017012393800541759, 0.0002670646645128727, 0.00018847294268198311, 0.00023688266810495406, 0.0001969079312402755, 0.00016789081564638764, 0.00018028692284133285, 0.00028872632537968457, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ 1,-22,-11,-73,-32,-39,10,-27,28,9,-29,-12,98,127,-22,-96, 
  /* [1][0][][] */ 127,-63,-34,10,-41,64,-65,-48,-33,73,-34,-58,-9,5,-58,-16, 
  /* [2][0][][] */ -33,-90,38,40,40,-64,-75,-16,40,-97,28,-127,51,-25,-75,12, 
  /* [3][0][][] */ 36,6,6,17,-29,65,-60,-20,127,48,7,15,6,-9,13,13, 
  /* [4][0][][] */ -102,-39,-26,-127,-18,49,47,-123,37,-17,-58,-49,-124,34,-37,-35, 
  /* [5][0][][] */ 87,59,76,-27,43,-40,-127,-123,-17,-78,64,51,-60,48,52,-30, 
  /* [6][0][][] */ 86,27,-123,-57,30,-71,5,-73,-33,20,-127,71,84,-87,6,75, 
  /* [7][0][][] */ -127,-11,90,-27,-55,9,-1,-60,-53,64,89,-28,53,-27,23,39, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.0072302673943340778, 0.011350248008966446, 0.0080100996419787407, 0.010067513212561607, 0.0083685871213674545, 0.0071353595703840256, 0.0076621938496828079, 0.012270868755877018, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data40[16] = { 17438, -223, -243, 2871, -908, 1068, 13055, 2086, -735, 18, -1012, 4134, -2321, 47, -495, -2184, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 0.00013734301319345832, 0.00025304342852905393, 0.00010789076623041183, 0.00015487498603761196, 0.00089353142539039254, 0.0007221352425403893, 0.00014090556942392141, 0.00077012961264699697, 0.00038500316441059113, 0.00097038160311058164, 0.00030164563213475049, 0.00016673674690537155, 9.0083936811424792e-05, 0.00041493502794764936, 0.00019606821297202259, 0.0003060784365516156, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ -3,-19,14,-1,-23,11,-2,11,6,-9,-8,-4,8,-8,-12,4, 7,-16,20,-3,9,-2,3,-28,-1,11,-21,64,-4,19,-5,1, 0,-14,-2,-2,-1,-13,-9,9,1,5,-16,-17,5,-6,-12,3, 
  /* [0][1][][] */ 12,-9,19,1,127,-26,-127,-24,127,127,-2,-7,126,-31,-6,-12, -127,127,127,-2,-84,-95,-26,-102,5,-103,127,127,127,127,127,127, 11,-21,2,-2,-5,127,-2,-11,-8,-11,-9,-12,18,-8,-20,-6, 
  /* [0][2][][] */ -1,-21,13,-17,-12,14,46,4,-19,-7,-15,-11,-10,-6,-11,-6, 20,-22,9,-127,10,-18,-17,127,-12,2,-13,-20,14,-68,-11,-37, -5,-3,2,0,9,-6,-7,-3,1,3,-13,-8,-4,-11,-6,-12, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.0058370782062411308, 0.010754345916211605, 0.0045853573828935623, 0.0065821865573525429, 0.037975084036588669, 0.030690746381878853, 0.0059884865768253803, 0.032730508595705032, 0.016362633556127548, 0.041241217404603958, 0.012819939292967319, 0.0070863114669919014, 0.0038285672198981047, 0.017634738236665726, 0.0083328988403081894, 0.013008332811295986, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data42[16] = { -1733, 3127, -1597, 5297, 82179, 66863, 5245, 19616, 5572, -931, 2661, 212, 5973, -25061, 1845, 47846, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 0.00018473903764970601, 0.0006940799648873508, 0.00020815152674913406, 0.00011925432772841305, 2.0074794520041905e-05, 2.6177074687439017e-05, 0.00011769722914323211, 1.8080225345329382e-05, 0.00010376407590229064, 3.97332405555062e-05, 0.00048590119695290923, 0.00080596114275977015, 0.00032917491625994444, 1.410259665135527e-05, 0.00062985316617414355, 4.1745635826373473e-05, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data43[16*3*3*1] = { 
  /* [0][0][][] */ -80, -103, -27, 
  /* [0][1][][] */ 67, -33, 18, 
  /* [0][2][][] */ 33, 127, 21, 
  /* [1][0][][] */ 103, -96, -15, 
  /* [1][1][][] */ -127, 102, 19, 
  /* [1][2][][] */ 12, -3, -16, 
  /* [2][0][][] */ -22, -1, -47, 
  /* [2][1][][] */ 37, 96, 127, 
  /* [2][2][][] */ -11, -92, -77, 
  /* [3][0][][] */ 114, 119, 54, 
  /* [3][1][][] */ -1, -24, -17, 
  /* [3][2][][] */ -102, -127, -46, 
  /* [4][0][][] */ 20, -57, -21, 
  /* [4][1][][] */ 7, -127, -9, 
  /* [4][2][][] */ 0, -67, -2, 
  /* [5][0][][] */ -60, 16, -4, 
  /* [5][1][][] */ -127, 14, 0, 
  /* [5][2][][] */ -73, 17, 1, 
  /* [6][0][][] */ -16, 79, 127, 
  /* [6][1][][] */ -52, 54, -16, 
  /* [6][2][][] */ -37, -52, -88, 
  /* [7][0][][] */ 36, 25, -8, 
  /* [7][1][][] */ 127, 73, 1, 
  /* [7][2][][] */ 38, 15, -12, 
  /* [8][0][][] */ -18, -27, 54, 
  /* [8][1][][] */ -50, -82, 127, 
  /* [8][2][][] */ -22, -57, 97, 
  /* [9][0][][] */ -22, 46, -14, 
  /* [9][1][][] */ -5, 127, -16, 
  /* [9][2][][] */ -3, 82, -12, 
  /* [10][0][][] */ 23, 85, 10, 
  /* [10][1][][] */ -38, -127, -30, 
  /* [10][2][][] */ 10, 38, 16, 
  /* [11][0][][] */ 9, -17, 6, 
  /* [11][1][][] */ 66, -91, 31, 
  /* [11][2][][] */ -82, 127, -49, 
  /* [12][0][][] */ -41, 48, -10, 
  /* [12][1][][] */ -127, 112, 5, 
  /* [12][2][][] */ -78, 78, 5, 
  /* [13][0][][] */ 107, 38, -8, 
  /* [13][1][][] */ 127, 91, 1, 
  /* [13][2][][] */ 116, 100, 71, 
  /* [14][0][][] */ -31, -29, 45, 
  /* [14][1][][] */ 42, 95, -127, 
  /* [14][2][][] */ -17, -70, 78, 
  /* [15][0][][] */ -79, -18, 14, 
  /* [15][1][][] */ -127, -120, 25, 
  /* [15][2][][] */ -39, -81, 14, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,1 } };
const TfArray<16, float> quant43_scale = { 16, { 0.047108452767133713, 0.17699037492275238, 0.053078636527061462, 0.030409852042794228, 0.0051190722733736038, 0.0066751535050570965, 0.030012791976332664, 0.0046104569919407368, 0.026459837332367897, 0.010131975635886192, 0.12390479445457458, 0.20552007853984833, 0.083939597010612488, 0.0035961619578301907, 0.160612553358078, 0.01064513623714447, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,24,24,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,24,24,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.099413216114044189, } };
const TfArray<1, int> quant46_zero = { 1, { 6 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.060088455677032471, } };
const TfArray<1, int> quant50_zero = { 1, { -34 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.022731702774763107, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.053062655031681061, } };
const TfArray<1, int> quant53_zero = { 1, { -23 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.068095073103904724, } };
const TfArray<1, int> quant54_zero = { 1, { -26 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,13,13,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,6,6,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.036717727780342102, } };
const TfArray<1, int> quant58_zero = { 1, { 2 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,6,6,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.018111143261194229, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,6,6,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.021800823509693146, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,6,6,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.035810884088277817, } };
const TfArray<1, int> quant61_zero = { 1, { -8 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,6,6,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.057775102555751801, } };
const TfArray<1, int> quant62_zero = { 1, { 5 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,6,6,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.017863772809505463, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,6,6,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,6,6,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.032777085900306702, } };
const TfArray<1, int> quant65_zero = { 1, { 9 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,6,6,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.071074739098548889, } };
const TfArray<1, int> quant66_zero = { 1, { -8 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,6,6,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.017438851296901703, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,6,6,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.0404362753033638, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,6,6,3 } };
const TfArray<1, float> quant69_scale = { 1, { 0.067631661891937256, } };
const TfArray<1, int> quant69_zero = { 1, { -19 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,6,6,3 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 96, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 9216), (TfLiteIntArray*)&g0::tensor_dimension44, 9216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 9216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 9216), (TfLiteIntArray*)&g0::tensor_dimension46, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension47, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension49, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension50, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension51, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension52, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension53, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension54, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 8112), (TfLiteIntArray*)&g0::tensor_dimension55, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension56, 8112, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 8112), (TfLiteIntArray*)&g0::tensor_dimension57, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 9840), (TfLiteIntArray*)&g0::tensor_dimension58, 576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 3456), (TfLiteIntArray*)&g0::tensor_dimension59, 3456, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension60, 3456, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 3456), (TfLiteIntArray*)&g0::tensor_dimension61, 576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 8640), (TfLiteIntArray*)&g0::tensor_dimension62, 576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 3456), (TfLiteIntArray*)&g0::tensor_dimension63, 3456, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension64, 3456, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 4032), (TfLiteIntArray*)&g0::tensor_dimension65, 576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 3456), (TfLiteIntArray*)&g0::tensor_dimension66, 576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension67, 3456, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 3456), (TfLiteIntArray*)&g0::tensor_dimension68, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 112), (TfLiteIntArray*)&g0::tensor_dimension69, 108, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension70, 108, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 71, };
const size_t tflNodes_subgraph_index[] = {0, 27, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  70, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_3_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
